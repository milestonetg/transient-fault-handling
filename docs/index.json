{
  "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.ThrottlingType.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.ThrottlingType.html",
    "title": "Enum ThrottlingType | Transient Fault Handling",
    "keywords": "Enum ThrottlingType Defines the possible throttling types in SQL Database. Namespace : MilestoneTG.TransientFaultHandling.Data.SqlServer Assembly : MilestoneTG.TransientFaultHandling.Data.SqlServer.dll Syntax public enum ThrottlingType Fields Name Description Hard Corresponds to a hard throttling type. Hard throttling is applied when the machine is out of resources, for example storage space. With hard throttling, no new connections are allowed to the databases hosted on the machine until resources are freed up. None Indicates that no throttling was applied to a given resource. Soft Corresponds to a soft throttling type. Soft throttling is applied when machine resources such as, CPU, I/O, storage, and worker threads exceed predefined safety thresholds despite the load balancerâ€™s best efforts. Unknown Corresponds to an unknown throttling type in the event that the throttling type cannot be determined with certainty."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.NetworkConnectivityErrorDetectionStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.NetworkConnectivityErrorDetectionStrategy.html",
    "title": "Class NetworkConnectivityErrorDetectionStrategy | Transient Fault Handling",
    "keywords": "Class NetworkConnectivityErrorDetectionStrategy Implements a strategy that detects network connectivity errors such as \"host not found\". Inheritance System.Object NetworkConnectivityErrorDetectionStrategy Implements ITransientErrorDetectionStrategy Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data Assembly : MilestoneTG.TransientFaultHandling.Data.dll Syntax public abstract class NetworkConnectivityErrorDetectionStrategy : ITransientErrorDetectionStrategy Methods | Improve this Doc View Source IsTransient(Exception) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration public abstract bool IsTransient(Exception ex) Parameters Type Name Description System.Exception ex The exception object to be verified. Returns Type Description System.Boolean true if the specified exception is considered as transient; otherwise, false. Implements ITransientErrorDetectionStrategy"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.MySql.ReliableMySqlConnection.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.MySql.ReliableMySqlConnection.html",
    "title": "Class ReliableMySqlConnection | Transient Fault Handling",
    "keywords": "Class ReliableMySqlConnection Inheritance System.Object ReliableDbConnection ReliableMySqlConnection Implements System.Data.IDbConnection System.IDisposable System.ICloneable Inherited Members ReliableDbConnection.ConnectionString ReliableDbConnection.ConnectionRetryPolicy ReliableDbConnection.CommandRetryPolicy ReliableDbConnection.Current ReliableDbConnection.SessionTracingId ReliableDbConnection.ConnectionTimeout ReliableDbConnection.Database ReliableDbConnection.State ReliableDbConnection.Open() ReliableDbConnection.OpenAsync() ReliableDbConnection.Open(RetryPolicy) ReliableDbConnection.OpenAsync(RetryPolicy) ReliableDbConnection.ExecuteCommand<T>(IDbCommand) ReliableDbConnection.ExecuteCommand<T>(IDbCommand, CommandBehavior) ReliableDbConnection.ExecuteCommand<T>(IDbCommand, RetryPolicy) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand, CommandBehavior) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand, RetryPolicy) ReliableDbConnection.ExecuteCommand<T>(IDbCommand, RetryPolicy, CommandBehavior) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand, RetryPolicy, CommandBehavior) ReliableDbConnection.ExecuteXmlReader<T>(IDbCommand, CommandBehavior, Boolean) ReliableDbConnection.ExecuteXmlReaderAsync<T>(IDbCommand, CommandBehavior, Boolean) ReliableDbConnection.ExecuteCommand(IDbCommand) ReliableDbConnection.ExecuteCommand(IDbCommand, RetryPolicy) ReliableDbConnection.BeginTransaction(IsolationLevel) ReliableDbConnection.BeginTransaction() ReliableDbConnection.ChangeDatabase(String) ReliableDbConnection.IDbConnection.Open() ReliableDbConnection.Close() ReliableDbConnection.CreateCommand() ReliableDbConnection.IDbConnection.CreateCommand() ReliableDbConnection.ICloneable.Clone() ReliableDbConnection.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.MySql Assembly : MilestoneTG.TransientFaultHandling.Data.MySql.dll Syntax public class ReliableMySqlConnection : ReliableDbConnection, IDbConnection, IDisposable, ICloneable Constructors | Improve this Doc View Source ReliableMySqlConnection(String) Initializes a new instance of the ReliableMySqlConnection class. Declaration public ReliableMySqlConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection string. | Improve this Doc View Source ReliableMySqlConnection(String, RetryPolicy) Initializes a new instance of the ReliableMySqlConnection class. Declaration public ReliableMySqlConnection(string connectionString, RetryPolicy retryPolicy) Parameters Type Name Description System.String connectionString The connection string. RetryPolicy retryPolicy The retry policy. | Improve this Doc View Source ReliableMySqlConnection(String, RetryPolicy, RetryPolicy) Initializes a new instance of the ReliableMySqlConnection class. Declaration public ReliableMySqlConnection(string connectionString, RetryPolicy connectionRetryPolicy, RetryPolicy commandRetryPolicy) Parameters Type Name Description System.String connectionString The connection string used to open the MySql Database. RetryPolicy connectionRetryPolicy The retry policy that defines whether to retry a request if a connection fails to be established. RetryPolicy commandRetryPolicy The retry policy that defines whether to retry a request if a command fails to be executed. Methods | Improve this Doc View Source Clone() Clones this instance. Declaration protected override ReliableDbConnection Clone() Returns Type Description ReliableDbConnection ReliableDbConnection. Overrides ReliableDbConnection.Clone() | Improve this Doc View Source CreateConnection(String) Creates the connection. Declaration protected override DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection string. Returns Type Description System.Data.Common.DbConnection DbConnection. Overrides ReliableDbConnection.CreateConnection(String) | Improve this Doc View Source CreateConnectionStringFailoverPolicy() Creates the connection string failover policy. Declaration protected override RetryPolicy CreateConnectionStringFailoverPolicy() Returns Type Description RetryPolicy RetryPolicy. Overrides ReliableDbConnection.CreateConnectionStringFailoverPolicy() Implements System.Data.IDbConnection System.IDisposable System.ICloneable"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.MySql.MySqlDatabaseTransientErrorDetectionStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.MySql.MySqlDatabaseTransientErrorDetectionStrategy.html",
    "title": "Class MySqlDatabaseTransientErrorDetectionStrategy | Transient Fault Handling",
    "keywords": "Class MySqlDatabaseTransientErrorDetectionStrategy Provides the transient error detection logic for transient faults that are specific to SQL Database. Inheritance System.Object MySqlDatabaseTransientErrorDetectionStrategy Implements ITransientErrorDetectionStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.MySql Assembly : MilestoneTG.TransientFaultHandling.Data.MySql.dll Syntax public sealed class MySqlDatabaseTransientErrorDetectionStrategy : ITransientErrorDetectionStrategy Methods | Improve this Doc View Source IsTransient(Exception) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration public bool IsTransient(Exception ex) Parameters Type Name Description System.Exception ex The exception object to be verified. Returns Type Description System.Boolean true if the specified exception is considered as transient; otherwise, false. Implements ITransientErrorDetectionStrategy"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.MySql.MySqlCommandExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.MySql.MySqlCommandExtensions.html",
    "title": "Class MySqlCommandExtensions | Transient Fault Handling",
    "keywords": "Class MySqlCommandExtensions Provides a set of extension methods that add retry capabilities to the standard System.Data.SqlClient.SqlCommand implementation. Inheritance System.Object MySqlCommandExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.MySql Assembly : MilestoneTG.TransientFaultHandling.Data.MySql.dll Syntax public static class MySqlCommandExtensions Methods | Improve this Doc View Source ExecuteNonQueryWithRetry(MySqlCommand) Executes a Transact-MySql statement against the connection and returns the number of rows affected. Uses the default retry policy when executing the command. Declaration public static int ExecuteNonQueryWithRetry(this MySqlCommand command) Parameters Type Name Description MySql.Data.MySqlClient.MySqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Int32 The number of rows affected. | Improve this Doc View Source ExecuteNonQueryWithRetryAsync(MySqlCommand) Executes a Transact-MySql statement against the connection and returns the number of rows affected. Uses the default retry policy when executing the command. Declaration public static Task<int> ExecuteNonQueryWithRetryAsync(this MySqlCommand command) Parameters Type Name Description MySql.Data.MySqlClient.MySqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < System.Int32 > The number of rows affected. | Improve this Doc View Source ExecuteReaderWithRetry(MySqlCommand) Sends the specified command to the connection and builds a MySqlDataReader object that contains the results. Uses the default retry policy when executing the command. Declaration public static MySqlDataReader ExecuteReaderWithRetry(this MySqlCommand command) Parameters Type Name Description MySql.Data.MySqlClient.MySqlCommand command The command object that is required for the extension method declaration. Returns Type Description MySql.Data.MySqlClient.MySqlDataReader A System.Data.MySqlClient.MySqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetry(MySqlCommand, CommandBehavior) Sends the specified command to the connection and builds a MySqlDataReader object by using the specified command behavior. Uses the default retry policy when executing the command. Declaration public static MySqlDataReader ExecuteReaderWithRetry(this MySqlCommand command, CommandBehavior behavior) Parameters Type Name Description MySql.Data.MySqlClient.MySqlCommand command The command object that is required for the extension method declaration. System.Data.CommandBehavior behavior One of the enumeration values that specifies the command behavior. Returns Type Description MySql.Data.MySqlClient.MySqlDataReader A System.Data.MySqlClient.MySqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetryAsync(MySqlCommand) Sends the specified command to the connection and builds a MySqlDataReader object that contains the results. Uses the default retry policy when executing the command. Declaration public static Task<MySqlDataReader> ExecuteReaderWithRetryAsync(this MySqlCommand command) Parameters Type Name Description MySql.Data.MySqlClient.MySqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < MySql.Data.MySqlClient.MySqlDataReader > A System.Data.MySqlClient.MySqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetryAsync(MySqlCommand, CommandBehavior) Sends the specified command to the connection and builds a MySqlDataReader object by using the specified command behavior. Uses the default retry policy when executing the command. Declaration public static Task<MySqlDataReader> ExecuteReaderWithRetryAsync(this MySqlCommand command, CommandBehavior behavior) Parameters Type Name Description MySql.Data.MySqlClient.MySqlCommand command The command object that is required for the extension method declaration. System.Data.CommandBehavior behavior One of the enumeration values that specifies the command behavior. Returns Type Description System.Threading.Tasks.Task < MySql.Data.MySqlClient.MySqlDataReader > A System.Data.MySqlClient.MySqlDataReader object. | Improve this Doc View Source ExecuteScalarWithRetry(MySqlCommand) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Uses the default retry policy when executing the command. Declaration public static object ExecuteScalarWithRetry(this MySqlCommand command) Parameters Type Name Description MySql.Data.MySqlClient.MySqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Object The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters. | Improve this Doc View Source ExecuteScalarWithRetryAsync(MySqlCommand) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Uses the default retry policy when executing the command. Declaration public static Task<object> ExecuteScalarWithRetryAsync(this MySqlCommand command) Parameters Type Name Description MySql.Data.MySqlClient.MySqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < System.Object > The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters."
  },
  "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.ReliableAdoTransaction.html": {
    "href": "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.ReliableAdoTransaction.html",
    "title": "Class ReliableAdoTransaction | Transient Fault Handling",
    "keywords": "Class ReliableAdoTransaction Provides a transaction implementation that includes transient fault-handling retry logic. Inheritance System.Object NHibernate.Transaction.AdoTransaction ReliableAdoTransaction Implements NHibernate.ITransaction System.IDisposable Inherited Members NHibernate.Transaction.AdoTransaction.CommitAsync(System.Threading.CancellationToken) NHibernate.Transaction.AdoTransaction.RollbackAsync(System.Threading.CancellationToken) NHibernate.Transaction.AdoTransaction.DisposeAsync(System.Boolean, System.Threading.CancellationToken) NHibernate.Transaction.AdoTransaction.Enlist(System.Data.Common.DbCommand) NHibernate.Transaction.AdoTransaction.RegisterSynchronization(NHibernate.Transaction.ISynchronization) NHibernate.Transaction.AdoTransaction.Commit() NHibernate.Transaction.AdoTransaction.Rollback() NHibernate.Transaction.AdoTransaction.Dispose() NHibernate.Transaction.AdoTransaction.Dispose(System.Boolean) NHibernate.Transaction.AdoTransaction.WasRolledBack NHibernate.Transaction.AdoTransaction.WasCommitted NHibernate.Transaction.AdoTransaction.IsActive NHibernate.Transaction.AdoTransaction.IsolationLevel System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer Assembly : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.dll Syntax public class ReliableAdoTransaction : AdoTransaction, ITransaction, IDisposable Constructors | Improve this Doc View Source ReliableAdoTransaction(ISessionImplementor) Constructs a ReliableAdoTransaction . Declaration public ReliableAdoTransaction(ISessionImplementor session) Parameters Type Name Description NHibernate.Engine.ISessionImplementor session NHibernate session to use. Methods | Improve this Doc View Source Begin() Begins the transaction. Declaration public void Begin() | Improve this Doc View Source Begin(IsolationLevel) Begins the System.Data.Common.DbTransaction on the System.Data.Common.DbConnection used by the NHibernate.ISession . Declaration public void Begin(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The isolation level. | Improve this Doc View Source ExecuteWithRetry(ReliableSqlDbConnection, Action) Executes the given action with the command retry policy on the given ReliableSqlDbConnection . Declaration public static void ExecuteWithRetry(ReliableSqlDbConnection connection, Action action) Parameters Type Name Description ReliableSqlDbConnection connection The reliable connection System.Action action The action to execute Implements NHibernate.ITransaction System.IDisposable"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.DbCommandExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.DbCommandExtensions.html",
    "title": "Class DbCommandExtensions | Transient Fault Handling",
    "keywords": "Class DbCommandExtensions Inheritance System.Object DbCommandExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data Assembly : MilestoneTG.TransientFaultHandling.Data.dll Syntax public static class DbCommandExtensions Methods | Improve this Doc View Source ExecuteNonQueryWithRetry(DbCommand, RetryPolicy) Executes a Transact-SQL statement against the connection and returns the number of rows affected. Uses the specified retry policy when executing the command. Declaration public static int ExecuteNonQueryWithRetry(this DbCommand command, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. RetryPolicy retryPolicy The retry policy that determines whether to retry a command if a connection fails while executing the command. Returns Type Description System.Int32 The number of rows affected. | Improve this Doc View Source ExecuteNonQueryWithRetry(DbCommand, RetryPolicy, RetryPolicy) Executes a Transact-SQL statement against the connection and returns the number of rows affected. Uses the specified retry policies when executing the command and establishing a connection. Declaration public static int ExecuteNonQueryWithRetry(this DbCommand command, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. RetryPolicy cmdRetryPolicy The command retry policy that determines whether to retry a command if it fails while executing. RetryPolicy conRetryPolicy The connection retry policy that determines whether to re-establish a connection if it drops while executing the command. Returns Type Description System.Int32 The number of rows affected. | Improve this Doc View Source ExecuteNonQueryWithRetryAsync(DbCommand, RetryPolicy) Executes a Transact-SQL statement against the connection and returns the number of rows affected. Uses the specified retry policy when executing the command. Declaration public static Task<int> ExecuteNonQueryWithRetryAsync(this DbCommand command, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. RetryPolicy retryPolicy The retry policy that determines whether to retry a command if a connection fails while executing the command. Returns Type Description System.Threading.Tasks.Task < System.Int32 > The number of rows affected. | Improve this Doc View Source ExecuteNonQueryWithRetryAsync(DbCommand, RetryPolicy, RetryPolicy) Executes a Transact-SQL statement against the connection and returns the number of rows affected. Uses the specified retry policies when executing the command and establishing a connection. Declaration public static Task<int> ExecuteNonQueryWithRetryAsync(this DbCommand command, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. RetryPolicy cmdRetryPolicy The command retry policy that determines whether to retry a command if it fails while executing. RetryPolicy conRetryPolicy The connection retry policy that determines whether to re-establish a connection if it drops while executing the command. Returns Type Description System.Threading.Tasks.Task < System.Int32 > The number of rows affected. | Improve this Doc View Source ExecuteReaderWithRetry(DbCommand, RetryPolicy) Sends the specified command to the connection and builds a SqlDataReader object that contains the results. Uses the specified retry policy when executing the command. Declaration public static DbDataReader ExecuteReaderWithRetry(this DbCommand command, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. RetryPolicy retryPolicy The retry policy that determines whether to retry a command if a connection fails while executing the command. Returns Type Description System.Data.Common.DbDataReader A System.Data.SqlClient.SqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetry(DbCommand, RetryPolicy, RetryPolicy) Sends the specified command to the connection and builds a SqlDataReader object that contains the results. Uses the specified retry policies when executing the command and establishing a connection. Declaration public static DbDataReader ExecuteReaderWithRetry(this DbCommand command, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. RetryPolicy cmdRetryPolicy The command retry policy that determines whether to retry a command if it fails while executing. RetryPolicy conRetryPolicy The connection retry policy that determines whether to re-establish a connection if it drops while executing the command. Returns Type Description System.Data.Common.DbDataReader A System.Data.SqlClient.SqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetry(DbCommand, CommandBehavior, RetryPolicy) Sends the specified command to the connection and builds a SqlDataReader object by using the specified command behavior. Uses the specified retry policy when executing the command. Declaration public static DbDataReader ExecuteReaderWithRetry(this DbCommand command, CommandBehavior behavior, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. System.Data.CommandBehavior behavior One of the enumeration values that specifies the command behavior. RetryPolicy retryPolicy The retry policy that determines whether to retry a command if a connection fails while executing the command. Returns Type Description System.Data.Common.DbDataReader A System.Data.SqlClient.SqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetry(DbCommand, CommandBehavior, RetryPolicy, RetryPolicy) Sends the specified command to the connection and builds a SqlDataReader object by using the specified command behavior. Uses the specified retry policies when executing the command and establishing a connection. Declaration public static DbDataReader ExecuteReaderWithRetry(this DbCommand command, CommandBehavior behavior, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. System.Data.CommandBehavior behavior One of the enumeration values that specifies the command behavior. RetryPolicy cmdRetryPolicy The command retry policy that determines whether to retry a command if it fails while executing. RetryPolicy conRetryPolicy The connection retry policy that determines whether to re-establish a connection if it drops while executing the command. Returns Type Description System.Data.Common.DbDataReader A System.Data.SqlClient.SqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetryAsync(DbCommand, RetryPolicy) Sends the specified command to the connection and builds a SqlDataReader object that contains the results. Uses the specified retry policy when executing the command. Declaration public static Task<DbDataReader> ExecuteReaderWithRetryAsync(this DbCommand command, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. RetryPolicy retryPolicy The retry policy that determines whether to retry a command if a connection fails while executing the command. Returns Type Description System.Threading.Tasks.Task < System.Data.Common.DbDataReader > A System.Data.SqlClient.SqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetryAsync(DbCommand, RetryPolicy, RetryPolicy) Sends the specified command to the connection and builds a SqlDataReader object that contains the results. Uses the specified retry policies when executing the command and establishing a connection. Declaration public static Task<DbDataReader> ExecuteReaderWithRetryAsync(this DbCommand command, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. RetryPolicy cmdRetryPolicy The command retry policy that determines whether to retry a command if it fails while executing. RetryPolicy conRetryPolicy The connection retry policy that determines whether to re-establish a connection if it drops while executing the command. Returns Type Description System.Threading.Tasks.Task < System.Data.Common.DbDataReader > A System.Data.SqlClient.SqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetryAsync(DbCommand, CommandBehavior, RetryPolicy) Sends the specified command to the connection and builds a SqlDataReader object by using the specified command behavior. Uses the specified retry policy when executing the command. Declaration public static Task<DbDataReader> ExecuteReaderWithRetryAsync(this DbCommand command, CommandBehavior behavior, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. System.Data.CommandBehavior behavior One of the enumeration values that specifies the command behavior. RetryPolicy retryPolicy The retry policy that determines whether to retry a command if a connection fails while executing the command. Returns Type Description System.Threading.Tasks.Task < System.Data.Common.DbDataReader > A System.Data.SqlClient.SqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetryAsync(DbCommand, CommandBehavior, RetryPolicy, RetryPolicy) Sends the specified command to the connection and builds a SqlDataReader object by using the specified command behavior. Uses the specified retry policies when executing the command and establishing a connection. Declaration public static Task<DbDataReader> ExecuteReaderWithRetryAsync(this DbCommand command, CommandBehavior behavior, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. System.Data.CommandBehavior behavior One of the enumeration values that specifies the command behavior. RetryPolicy cmdRetryPolicy The command retry policy that determines whether to retry a command if it fails while executing. RetryPolicy conRetryPolicy The connection retry policy that determines whether to re-establish a connection if it drops while executing the command. Returns Type Description System.Threading.Tasks.Task < System.Data.Common.DbDataReader > A System.Data.SqlClient.SqlDataReader object. | Improve this Doc View Source ExecuteScalarWithRetry(DbCommand, RetryPolicy) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Uses the specified retry policy when executing the command. Declaration public static object ExecuteScalarWithRetry(this DbCommand command, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. RetryPolicy retryPolicy The retry policy that determines whether to retry a command if a connection fails while executing the command. Returns Type Description System.Object The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters. | Improve this Doc View Source ExecuteScalarWithRetry(DbCommand, RetryPolicy, RetryPolicy) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Uses the specified retry policies when executing the command and establishing a connection. Declaration public static object ExecuteScalarWithRetry(this DbCommand command, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. RetryPolicy cmdRetryPolicy The command retry policy that determines whether to retry a command if it fails while executing. RetryPolicy conRetryPolicy The connection retry policy that determines whether to re-establish a connection if it drops while executing the command. Returns Type Description System.Object The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters. | Improve this Doc View Source ExecuteScalarWithRetryAsync(DbCommand, RetryPolicy) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Uses the specified retry policy when executing the command. Declaration public static Task<object> ExecuteScalarWithRetryAsync(this DbCommand command, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. RetryPolicy retryPolicy The retry policy that determines whether to retry a command if a connection fails while executing the command. Returns Type Description System.Threading.Tasks.Task < System.Object > The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters. | Improve this Doc View Source ExecuteScalarWithRetryAsync(DbCommand, RetryPolicy, RetryPolicy) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Uses the specified retry policies when executing the command and establishing a connection. Declaration public static Task<object> ExecuteScalarWithRetryAsync(this DbCommand command, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The command object that is required for the extension method declaration. RetryPolicy cmdRetryPolicy The command retry policy that determines whether to retry a command if it fails while executing. RetryPolicy conRetryPolicy The connection retry policy that determines whether to re-establish a connection if it drops while executing the command. Returns Type Description System.Threading.Tasks.Task < System.Object > The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters."
  },
  "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.SqlAzureTransientErrorDetectionStrategyWithTimeouts.html": {
    "href": "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.SqlAzureTransientErrorDetectionStrategyWithTimeouts.html",
    "title": "Class SqlAzureTransientErrorDetectionStrategyWithTimeouts | Transient Fault Handling",
    "keywords": "Class SqlAzureTransientErrorDetectionStrategyWithTimeouts Transient error detection strategy for SQL Azure that extends the Enterprise Library detection strategy and also detects timeout exceptions. Inheritance System.Object SqlAzureTransientErrorDetectionStrategy SqlAzureTransientErrorDetectionStrategyWithTimeouts Implements ITransientErrorDetectionStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer Assembly : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.dll Syntax public class SqlAzureTransientErrorDetectionStrategyWithTimeouts : SqlAzureTransientErrorDetectionStrategy, ITransientErrorDetectionStrategy Methods | Improve this Doc View Source IsConnectionTimeout(Exception) Determines whether [is connection timeout] [the specified ex]. Declaration protected virtual bool IsConnectionTimeout(Exception ex) Parameters Type Name Description System.Exception ex The ex. Returns Type Description System.Boolean true if [is connection timeout] [the specified ex]; otherwise, false . | Improve this Doc View Source IsTransient(Exception) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration public override bool IsTransient(Exception ex) Parameters Type Name Description System.Exception ex The exception object to be verified. Returns Type Description System.Boolean true if the specified exception is considered as transient; otherwise, false. Overrides SqlAzureTransientErrorDetectionStrategy.IsTransient(Exception) | Improve this Doc View Source IsTransientTimeout(Exception) Determines whether [is transient timeout] [the specified ex]. Declaration protected virtual bool IsTransientTimeout(Exception ex) Parameters Type Name Description System.Exception ex The ex. Returns Type Description System.Boolean true if [is transient timeout] [the specified ex]; otherwise, false . Implements ITransientErrorDetectionStrategy"
  },
  "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.SqlAzureClientDriverWithTimeoutRetries.html": {
    "href": "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.SqlAzureClientDriverWithTimeoutRetries.html",
    "title": "Class SqlAzureClientDriverWithTimeoutRetries | Transient Fault Handling",
    "keywords": "Class SqlAzureClientDriverWithTimeoutRetries NHibernate client driver for SQL Azure that includes the Enterprise Library transient fault-handling as well as timeout retries. Note: Timeout errors can be caused by unoptimised queries that you might be executing as well as being a transient exception. Inheritance System.Object NHibernate.Driver.DriverBase NHibernate.Driver.ReflectionBasedDriver NHibernate.Driver.SqlClientDriver NHibernate.Driver.Sql2008ClientDriver ReliableSql2008ClientDriver DefaultReliableSql2008ClientDriver < SqlAzureTransientErrorDetectionStrategyWithTimeouts > SqlAzureClientDriverWithTimeoutRetries Implements NHibernate.Driver.IDriver NHibernate.Driver.ISqlParameterFormatter NHibernate.AdoNet.IEmbeddedBatcherFactoryProvider Inherited Members DefaultReliableSql2008ClientDriver<SqlAzureTransientErrorDetectionStrategyWithTimeouts>.CreateReliableConnection() DefaultReliableSql2008ClientDriver<SqlAzureTransientErrorDetectionStrategyWithTimeouts>.ConnectionRetryEventHandler() DefaultReliableSql2008ClientDriver<SqlAzureTransientErrorDetectionStrategyWithTimeouts>.CommandRetryEventHandler() DefaultReliableSql2008ClientDriver<SqlAzureTransientErrorDetectionStrategyWithTimeouts>.RetryEventHandler() ReliableSql2008ClientDriver.CreateConnection() ReliableSql2008ClientDriver.CreateCommand() NHibernate.Driver.Sql2008ClientDriver.InitializeParameter(System.Data.Common.DbParameter, System.String, NHibernate.SqlTypes.SqlType) NHibernate.Driver.Sql2008ClientDriver.RequiresTimeSpanForTime NHibernate.Driver.Sql2008ClientDriver.MinDate NHibernate.Driver.SqlClientDriver.MaxSizeForAnsiClob NHibernate.Driver.SqlClientDriver.MaxSizeForClob NHibernate.Driver.SqlClientDriver.MaxSizeForBlob NHibernate.Driver.SqlClientDriver.MaxSizeForXml NHibernate.Driver.SqlClientDriver.MaxSizeForLengthLimitedAnsiString NHibernate.Driver.SqlClientDriver.MaxSizeForLengthLimitedString NHibernate.Driver.SqlClientDriver.MaxSizeForLengthLimitedBinary NHibernate.Driver.SqlClientDriver.MaxPrecision NHibernate.Driver.SqlClientDriver.MaxScale NHibernate.Driver.SqlClientDriver.MaxDateTime2 NHibernate.Driver.SqlClientDriver.MaxDateTimeOffset NHibernate.Driver.SqlClientDriver.Configure(System.Collections.Generic.IDictionary<System.String, System.String>) NHibernate.Driver.SqlClientDriver.SetVariableLengthParameterSize(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.SetDefaultParameterSize(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.IsAnsiText(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.IsText(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.IsBlob(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.GetResultSetsCommand(NHibernate.Engine.ISessionImplementor) NHibernate.Driver.SqlClientDriver.NHibernate.AdoNet.IEmbeddedBatcherFactoryProvider.BatcherFactoryClass NHibernate.Driver.SqlClientDriver.UseNamedPrefixInSql NHibernate.Driver.SqlClientDriver.UseNamedPrefixInParameter NHibernate.Driver.SqlClientDriver.NamedPrefix NHibernate.Driver.SqlClientDriver.SupportsMultipleOpenReaders NHibernate.Driver.SqlClientDriver.SupportsMultipleQueries NHibernate.Driver.SqlClientDriver.HasDelayedDistributedTransactionCompletion NHibernate.Driver.ReflectionBasedDriver.ReflectionTypedProviderExceptionMessageTemplate NHibernate.Driver.ReflectionBasedDriver.DriverVersion NHibernate.Driver.DriverBase.FormatNameForSql(System.String) NHibernate.Driver.DriverBase.FormatNameForParameter(System.String) NHibernate.Driver.DriverBase.GenerateCommand(System.Data.CommandType, NHibernate.SqlCommand.SqlString, NHibernate.SqlTypes.SqlType[]) NHibernate.Driver.DriverBase.SetCommandTimeout(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.NHibernate.Driver.ISqlParameterFormatter.GetParameterName(System.Int32) NHibernate.Driver.DriverBase.GetSqlStringFormatter() NHibernate.Driver.DriverBase.GenerateParameter(System.Data.Common.DbCommand, System.String, NHibernate.SqlTypes.SqlType) NHibernate.Driver.DriverBase.RemoveUnusedCommandParameters(System.Data.Common.DbCommand, NHibernate.SqlCommand.SqlString) NHibernate.Driver.DriverBase.ExpandQueryParameters(System.Data.Common.DbCommand, NHibernate.SqlCommand.SqlString, NHibernate.SqlTypes.SqlType[]) NHibernate.Driver.DriverBase.CloneParameter(System.Data.Common.DbCommand, System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.DriverBase.PrepareCommand(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.OnBeforePrepare(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.AdjustCommand(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.GenerateOutputParameter(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.IsPrepareSqlEnabled NHibernate.Driver.DriverBase.SupportsPreparingCommands NHibernate.Driver.DriverBase.SupportsSystemTransactions NHibernate.Driver.DriverBase.SupportsNullEnlistment NHibernate.Driver.DriverBase.SupportsEnlistmentWhenAutoEnlistmentIsDisabled System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer Assembly : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.dll Syntax public class SqlAzureClientDriverWithTimeoutRetries : DefaultReliableSql2008ClientDriver<SqlAzureTransientErrorDetectionStrategyWithTimeouts>, IDriver, ISqlParameterFormatter, IEmbeddedBatcherFactoryProvider Implements NHibernate.Driver.IDriver NHibernate.Driver.ISqlParameterFormatter NHibernate.AdoNet.IEmbeddedBatcherFactoryProvider"
  },
  "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.ReliableSqlDbConnection.html": {
    "href": "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.ReliableSqlDbConnection.html",
    "title": "Class ReliableSqlDbConnection | Transient Fault Handling",
    "keywords": "Class ReliableSqlDbConnection Wrap ReliableSqlConnection in a class that extends System.Data.Common.DbConnection so internal type casts within NHibernate don't fail. Inheritance System.Object System.MarshalByRefObject System.ComponentModel.Component System.Data.Common.DbConnection ReliableSqlDbConnection Implements System.ComponentModel.IComponent System.Data.IDbConnection System.IDisposable Inherited Members System.Data.Common.DbConnection.BeginTransaction() System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel) System.Data.Common.DbConnection.CreateCommand() System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction) System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs) System.Data.Common.DbConnection.OpenAsync() System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken) System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction() System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel) System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand() System.Data.Common.DbConnection.DbProviderFactory System.Data.Common.DbConnection.StateChange System.ComponentModel.Component.Dispose() System.ComponentModel.Component.GetService(System.Type) System.ComponentModel.Component.ToString() System.ComponentModel.Component.CanRaiseEvents System.ComponentModel.Component.Container System.ComponentModel.Component.DesignMode System.ComponentModel.Component.Events System.ComponentModel.Component.Site System.ComponentModel.Component.Disposed System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer Assembly : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.dll Syntax public class ReliableSqlDbConnection : DbConnection, IComponent, IDbConnection, IDisposable Constructors | Improve this Doc View Source ReliableSqlDbConnection(ReliableSqlConnection) Constructs a ReliableSqlDbConnection to wrap around the given ReliableSqlConnection . Declaration public ReliableSqlDbConnection(ReliableSqlConnection connection) Parameters Type Name Description ReliableSqlConnection connection The ReliableSqlConnection to wrap Properties | Improve this Doc View Source ConnectionString Gets or sets the string used to open the connection. Declaration public override string ConnectionString { get; set; } Property Value Type Description System.String The connection string. Overrides System.Data.Common.DbConnection.ConnectionString | Improve this Doc View Source ConnectionTimeout Gets the time to wait while establishing a connection before terminating the attempt and generating an error. Declaration public override int ConnectionTimeout { get; } Property Value Type Description System.Int32 The connection timeout. Overrides System.Data.Common.DbConnection.ConnectionTimeout | Improve this Doc View Source Database Gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened. Declaration public override string Database { get; } Property Value Type Description System.String The database. Overrides System.Data.Common.DbConnection.Database | Improve this Doc View Source DataSource Gets the name of the database server to which to connect. Declaration public override string DataSource { get; } Property Value Type Description System.String The data source. Overrides System.Data.Common.DbConnection.DataSource | Improve this Doc View Source ReliableConnection The underlying ReliableSqlConnection . Declaration public ReliableSqlConnection ReliableConnection { get; set; } Property Value Type Description ReliableSqlConnection The reliable connection. | Improve this Doc View Source ServerVersion Gets a string that represents the version of the server to which the object is connected. Declaration public override string ServerVersion { get; } Property Value Type Description System.String The server version. Overrides System.Data.Common.DbConnection.ServerVersion | Improve this Doc View Source State Gets a string that describes the state of the connection. Declaration public override ConnectionState State { get; } Property Value Type Description System.Data.ConnectionState The state. Overrides System.Data.Common.DbConnection.State Methods | Improve this Doc View Source BeginDbTransaction(IsolationLevel) Starts a database transaction. Declaration protected override DbTransaction BeginDbTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Specifies the isolation level for the transaction. Returns Type Description System.Data.Common.DbTransaction An object representing the new transaction. Overrides System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel) | Improve this Doc View Source ChangeDatabase(String) Changes the current database for an open connection. Declaration public override void ChangeDatabase(string databaseName) Parameters Type Name Description System.String databaseName Specifies the name of the database for the connection to use. Overrides System.Data.Common.DbConnection.ChangeDatabase(System.String) | Improve this Doc View Source Close() Closes the connection to the database. This is the preferred method of closing any open connection. Declaration public override void Close() Overrides System.Data.Common.DbConnection.Close() | Improve this Doc View Source CreateDbCommand() Creates and returns a System.Data.Common.DbCommand object associated with the current connection. Declaration protected override DbCommand CreateDbCommand() Returns Type Description System.Data.Common.DbCommand A System.Data.Common.DbCommand object. Overrides System.Data.Common.DbConnection.CreateDbCommand() | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the System.ComponentModel.Component and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides System.ComponentModel.Component.Dispose(System.Boolean) | Improve this Doc View Source GetSchema() Returns schema information for the data source of this System.Data.Common.DbConnection . Declaration public override DataTable GetSchema() Returns Type Description System.Data.DataTable A System.Data.DataTable that contains schema information. Overrides System.Data.Common.DbConnection.GetSchema() | Improve this Doc View Source GetSchema(String) Returns schema information for the data source of this System.Data.Common.DbConnection using the specified string for the schema name. Declaration public override DataTable GetSchema(string collectionName) Parameters Type Name Description System.String collectionName Specifies the name of the schema to return. Returns Type Description System.Data.DataTable A System.Data.DataTable that contains schema information. Overrides System.Data.Common.DbConnection.GetSchema(System.String) | Improve this Doc View Source GetSchema(String, String[]) Returns schema information for the data source of this System.Data.Common.DbConnection using the specified string for the schema name and the specified string array for the restriction values. Declaration public override DataTable GetSchema(string collectionName, string[] restrictionValues) Parameters Type Name Description System.String collectionName Specifies the name of the schema to return. System.String [] restrictionValues Specifies a set of restriction values for the requested schema. Returns Type Description System.Data.DataTable A System.Data.DataTable that contains schema information. Overrides System.Data.Common.DbConnection.GetSchema(System.String, System.String[]) | Improve this Doc View Source Open() Opens a database connection with the settings specified by the System.Data.Common.DbConnection.ConnectionString . Declaration public override void Open() Overrides System.Data.Common.DbConnection.Open() Operators | Improve this Doc View Source Explicit(ReliableSqlDbConnection to SqlConnection) Explicit type-casting between ReliableSqlDbConnection and ReliableSqlConnection . Declaration public static explicit operator SqlConnection(ReliableSqlDbConnection connection) Parameters Type Name Description ReliableSqlDbConnection connection The ReliableSqlDbConnection being casted Returns Type Description System.Data.SqlClient.SqlConnection The underlying ReliableSqlConnection Implements System.ComponentModel.IComponent System.Data.IDbConnection System.IDisposable See Also System.Data.Common.DbConnection"
  },
  "api/MilestoneTG.TransientFaultHandling.RetryPolicy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.RetryPolicy.html",
    "title": "Class RetryPolicy | Transient Fault Handling",
    "keywords": "Class RetryPolicy Provides the base implementation of the retry mechanism for unreliable actions and transient conditions. Inheritance System.Object RetryPolicy RetryPolicy<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public class RetryPolicy Constructors | Improve this Doc View Source RetryPolicy(ITransientErrorDetectionStrategy, RetryPolicyOptions) Initializes a new instance of the RetryPolicy class using the supplied options. Declaration public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, RetryPolicyOptions options) Parameters Type Name Description ITransientErrorDetectionStrategy errorDetectionStrategy The error detection strategy. RetryPolicyOptions options The options. | Improve this Doc View Source RetryPolicy(ITransientErrorDetectionStrategy, RetryStrategy) Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries. Declaration public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, RetryStrategy retryStrategy) Parameters Type Name Description ITransientErrorDetectionStrategy errorDetectionStrategy The ITransientErrorDetectionStrategy that is responsible for detecting transient conditions. RetryStrategy retryStrategy The strategy to use for this retry policy. | Improve this Doc View Source RetryPolicy(ITransientErrorDetectionStrategy, Int32) Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and default fixed time interval between retries. Declaration public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount) Parameters Type Name Description ITransientErrorDetectionStrategy errorDetectionStrategy The ITransientErrorDetectionStrategy that is responsible for detecting transient conditions. System.Int32 retryCount The number of retry attempts. | Improve this Doc View Source RetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan) Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and fixed time interval between retries. Declaration public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan retryInterval) Parameters Type Name Description ITransientErrorDetectionStrategy errorDetectionStrategy The ITransientErrorDetectionStrategy that is responsible for detecting transient conditions. System.Int32 retryCount The number of retry attempts. System.TimeSpan retryInterval The interval between retries. | Improve this Doc View Source RetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan, TimeSpan) Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries. Declaration public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan initialInterval, TimeSpan increment) Parameters Type Name Description ITransientErrorDetectionStrategy errorDetectionStrategy The ITransientErrorDetectionStrategy that is responsible for detecting transient conditions. System.Int32 retryCount The number of retry attempts. System.TimeSpan initialInterval The initial interval that will apply for the first retry. System.TimeSpan increment The incremental time value that will be used to calculate the progressive delay between retries. | Improve this Doc View Source RetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan, TimeSpan, TimeSpan) Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and backoff parameters for calculating the exponential delay between retries. Declaration public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff) Parameters Type Name Description ITransientErrorDetectionStrategy errorDetectionStrategy The ITransientErrorDetectionStrategy that is responsible for detecting transient conditions. System.Int32 retryCount The number of retry attempts. System.TimeSpan minBackoff The minimum backoff time. System.TimeSpan maxBackoff The maximum backoff time. System.TimeSpan deltaBackoff The time value that will be used to calculate a random delta in the exponential delay between retries. Properties | Improve this Doc View Source ErrorDetectionStrategy Gets the instance of the error detection strategy. Declaration public ITransientErrorDetectionStrategy ErrorDetectionStrategy { get; } Property Value Type Description ITransientErrorDetectionStrategy | Improve this Doc View Source NoRetry Returns a default policy that performs no retries, but invokes the action only once. Declaration public static RetryPolicy NoRetry { get; } Property Value Type Description RetryPolicy | Improve this Doc View Source RetryStrategy Gets the retry strategy. Declaration public RetryStrategy RetryStrategy { get; } Property Value Type Description RetryStrategy Methods | Improve this Doc View Source ExecuteAction(Action) Repetitively executes the specified action while it satisfies the current retry policy. Declaration public virtual void ExecuteAction(Action action) Parameters Type Name Description System.Action action A delegate that represents the executable action that doesn't return any results. | Improve this Doc View Source ExecuteAction<TResult>(Func<TResult>) Repetitively executes the specified action while it satisfies the current retry policy. Declaration public virtual TResult ExecuteAction<TResult>(Func<TResult> func) Parameters Type Name Description System.Func <TResult> func A delegate that represents the executable action that returns the result of type TResult . Returns Type Description TResult The result from the action. Type Parameters Name Description TResult The type of result expected from the executable action. | Improve this Doc View Source ExecuteAsync(Func<Task>) Repetitively executes the specified asynchronous task while it satisfies the current retry policy. Declaration public Task ExecuteAsync(Func<Task> taskAction) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > taskAction A function that returns a started task (also known as \"hot\" task). Returns Type Description System.Threading.Tasks.Task A task that will run to completion if the original task completes successfully (either the first time or after retrying transient failures). If the task fails with a non-transient error or the retry limit is reached, the returned task will transition to a faulted state and the exception must be observed. | Improve this Doc View Source ExecuteAsync(Func<Task>, CancellationToken) Repetitively executes the specified asynchronous task while it satisfies the current retry policy. Declaration public Task ExecuteAsync(Func<Task> taskAction, CancellationToken cancellationToken) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > taskAction A function that returns a started task (also known as \"hot\" task). System.Threading.CancellationToken cancellationToken The token used to cancel the retry operation. This token does not cancel the execution of the asynchronous task. Returns Type Description System.Threading.Tasks.Task Returns a task that will run to completion if the original task completes successfully (either the first time or after retrying transient failures). If the task fails with a non-transient error or the retry limit is reached, the returned task will transition to a faulted state and the exception must be observed. | Improve this Doc View Source ExecuteAsync<TResult>(Func<Task<TResult>>) Repeatedly executes the specified asynchronous task while it satisfies the current retry policy. Declaration public Task<TResult> ExecuteAsync<TResult>(Func<Task<TResult>> taskFunc) Parameters Type Name Description System.Func < System.Threading.Tasks.Task <TResult>> taskFunc A function that returns a started task (also known as \"hot\" task). Returns Type Description System.Threading.Tasks.Task <TResult> Returns a task that will run to completion if the original task completes successfully (either the first time or after retrying transient failures). If the task fails with a non-transient error or the retry limit is reached, the returned task will transition to a faulted state and the exception must be observed. Type Parameters Name Description TResult | Improve this Doc View Source ExecuteAsync<TResult>(Func<Task<TResult>>, CancellationToken) Repeatedly executes the specified asynchronous task while it satisfies the current retry policy. Declaration public Task<TResult> ExecuteAsync<TResult>(Func<Task<TResult>> taskFunc, CancellationToken cancellationToken) Parameters Type Name Description System.Func < System.Threading.Tasks.Task <TResult>> taskFunc A function that returns a started task (also known as \"hot\" task). System.Threading.CancellationToken cancellationToken The token used to cancel the retry operation. This token does not cancel the execution of the asynchronous task. Returns Type Description System.Threading.Tasks.Task <TResult> Returns a task that will run to completion if the original task completes successfully (either the first time or after retrying transient failures). If the task fails with a non-transient error or the retry limit is reached, the returned task will transition to a faulted state and the exception must be observed. Type Parameters Name Description TResult | Improve this Doc View Source OnRetrying(Int32, Exception, TimeSpan) Notifies the subscribers whenever a retry condition is encountered. Declaration protected virtual void OnRetrying(int retryCount, Exception lastError, TimeSpan delay) Parameters Type Name Description System.Int32 retryCount The current retry attempt count. System.Exception lastError The exception that caused the retry conditions to occur. System.TimeSpan delay The delay that indicates how long the current thread will be suspended before the next iteration is invoked. Events | Improve this Doc View Source Retrying An instance of a callback delegate that will be invoked whenever a retry condition is encountered. Declaration public event EventHandler<RetryingEventArgs> Retrying Event Type Type Description System.EventHandler < RetryingEventArgs >"
  },
  "api/MilestoneTG.TransientFaultHandling.RetryPolicy-1.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.RetryPolicy-1.html",
    "title": "Class RetryPolicy<T> | Transient Fault Handling",
    "keywords": "Class RetryPolicy<T> Provides a generic version of the RetryPolicy class. Inheritance System.Object RetryPolicy RetryPolicy<T> Inherited Members RetryPolicy.NoRetry RetryPolicy.Retrying RetryPolicy.RetryStrategy RetryPolicy.ErrorDetectionStrategy RetryPolicy.ExecuteAction(Action) RetryPolicy.ExecuteAction<TResult>(Func<TResult>) RetryPolicy.ExecuteAsync(Func<Task>) RetryPolicy.ExecuteAsync(Func<Task>, CancellationToken) RetryPolicy.ExecuteAsync<TResult>(Func<Task<TResult>>) RetryPolicy.ExecuteAsync<TResult>(Func<Task<TResult>>, CancellationToken) RetryPolicy.OnRetrying(Int32, Exception, TimeSpan) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public class RetryPolicy<T> : RetryPolicy where T : ITransientErrorDetectionStrategy, new() Type Parameters Name Description T The type that implements the ITransientErrorDetectionStrategy interface that is responsible for detecting transient conditions. Constructors | Improve this Doc View Source RetryPolicy(RetryStrategy) Initializes a new instance of the RetryPolicy<T> class with the specified number of retry attempts and parameters defining the progressive delay between retries. Declaration public RetryPolicy(RetryStrategy retryStrategy) Parameters Type Name Description RetryStrategy retryStrategy The strategy to use for this retry policy. | Improve this Doc View Source RetryPolicy(Int32) Initializes a new instance of the RetryPolicy<T> class with the specified number of retry attempts and the default fixed time interval between retries. Declaration public RetryPolicy(int retryCount) Parameters Type Name Description System.Int32 retryCount The number of retry attempts. | Improve this Doc View Source RetryPolicy(Int32, TimeSpan) Initializes a new instance of the RetryPolicy<T> class with the specified number of retry attempts and a fixed time interval between retries. Declaration public RetryPolicy(int retryCount, TimeSpan retryInterval) Parameters Type Name Description System.Int32 retryCount The number of retry attempts. System.TimeSpan retryInterval The interval between retries. | Improve this Doc View Source RetryPolicy(Int32, TimeSpan, TimeSpan) Initializes a new instance of the RetryPolicy<T> class with the specified number of retry attempts and parameters defining the progressive delay between retries. Declaration public RetryPolicy(int retryCount, TimeSpan initialInterval, TimeSpan increment) Parameters Type Name Description System.Int32 retryCount The number of retry attempts. System.TimeSpan initialInterval The initial interval that will apply for the first retry. System.TimeSpan increment The incremental time value that will be used to calculate the progressive delay between retries. | Improve this Doc View Source RetryPolicy(Int32, TimeSpan, TimeSpan, TimeSpan) Initializes a new instance of the RetryPolicy<T> class with the specified number of retry attempts and backoff parameters for calculating the exponential delay between retries. Declaration public RetryPolicy(int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff) Parameters Type Name Description System.Int32 retryCount The number of retry attempts. System.TimeSpan minBackoff The minimum backoff time. System.TimeSpan maxBackoff The maximum backoff time. System.TimeSpan deltaBackoff The time value that will be used to calculate a random delta in the exponential delay between retries."
  },
  "api/MilestoneTG.TransientFaultHandling.RetryManager.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.RetryManager.html",
    "title": "Class RetryManager | Transient Fault Handling",
    "keywords": "Class RetryManager Provides the entry point to the retry functionality. Inheritance System.Object RetryManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public class RetryManager Constructors | Improve this Doc View Source RetryManager(IEnumerable<RetryStrategy>) Initializes a new instance of the RetryManager class. Declaration public RetryManager(IEnumerable<RetryStrategy> retryStrategies) Parameters Type Name Description System.Collections.Generic.IEnumerable < RetryStrategy > retryStrategies The complete set of retry strategies. | Improve this Doc View Source RetryManager(IEnumerable<RetryStrategy>, String) Initializes a new instance of the RetryManager class with the specified retry strategies and default retry strategy name. Declaration public RetryManager(IEnumerable<RetryStrategy> retryStrategies, string defaultRetryStrategyName) Parameters Type Name Description System.Collections.Generic.IEnumerable < RetryStrategy > retryStrategies The complete set of retry strategies. System.String defaultRetryStrategyName The default retry strategy. | Improve this Doc View Source RetryManager(IEnumerable<RetryStrategy>, String, IDictionary<String, String>) Initializes a new instance of the RetryManager class with the specified retry strategies and defaults. Declaration public RetryManager(IEnumerable<RetryStrategy> retryStrategies, string defaultRetryStrategyName, IDictionary<string, string> defaultRetryStrategyNamesMap) Parameters Type Name Description System.Collections.Generic.IEnumerable < RetryStrategy > retryStrategies The complete set of retry strategies. System.String defaultRetryStrategyName The default retry strategy. System.Collections.Generic.IDictionary < System.String , System.String > defaultRetryStrategyNamesMap The names of the default strategies for different technologies. Properties | Improve this Doc View Source DefaultRetryStrategyName Gets or sets the default retry strategy name. Declaration public string DefaultRetryStrategyName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Instance Gets the default RetryManager for the application. Declaration public static RetryManager Instance { get; } Property Value Type Description RetryManager Methods | Improve this Doc View Source GetDefaultRetryStrategy(String) Returns the retry strategy for the specified technology. Declaration public virtual RetryStrategy GetDefaultRetryStrategy(string technology) Parameters Type Name Description System.String technology The technology to get the default retry strategy for. Returns Type Description RetryStrategy The retry strategy for the specified technology. | Improve this Doc View Source GetRetryPolicy<T>() Returns a retry policy with the specified error detection strategy and the default retry strategy defined in the configuration. Declaration public virtual RetryPolicy<T> GetRetryPolicy<T>() where T : ITransientErrorDetectionStrategy, new() Returns Type Description RetryPolicy <T> A new retry policy with the specified error detection strategy and the default retry strategy defined in the configuration. Type Parameters Name Description T The type that implements the ITransientErrorDetectionStrategy interface that is responsible for detecting transient conditions. | Improve this Doc View Source GetRetryPolicy<T>(String) Returns a retry policy with the specified error detection strategy and retry strategy. Declaration public virtual RetryPolicy<T> GetRetryPolicy<T>(string retryStrategyName) where T : ITransientErrorDetectionStrategy, new() Parameters Type Name Description System.String retryStrategyName The retry strategy name, as defined in the configuration. Returns Type Description RetryPolicy <T> A new retry policy with the specified error detection strategy and the default retry strategy defined in the configuration. Type Parameters Name Description T The type that implements the ITransientErrorDetectionStrategy interface that is responsible for detecting transient conditions. | Improve this Doc View Source GetRetryStrategy() Returns the default retry strategy defined in the configuration. Declaration public virtual RetryStrategy GetRetryStrategy() Returns Type Description RetryStrategy The retry strategy that matches the default strategy. | Improve this Doc View Source GetRetryStrategy(String) Returns the retry strategy that matches the specified name. Declaration public virtual RetryStrategy GetRetryStrategy(string retryStrategyName) Parameters Type Name Description System.String retryStrategyName The retry strategy name. Returns Type Description RetryStrategy The retry strategy that matches the specified name. | Improve this Doc View Source SetDefault(RetryManager) Sets the specified retry manager as the default retry manager. Will throw an exception if the manager is already set. Declaration public static void SetDefault(RetryManager retryManager) Parameters Type Name Description RetryManager retryManager The retry manager. | Improve this Doc View Source SetDefault(RetryManager, Boolean) Sets the specified retry manager as the default retry manager. Declaration public static void SetDefault(RetryManager retryManager, bool throwIfSet) Parameters Type Name Description RetryManager retryManager The retry manager. System.Boolean throwIfSet true to throw an exception if the manager is already set; otherwise, false. Extension Methods RetryManagerSqlExtensions.GetDefaultSqlCommandRetryStrategy(RetryManager) RetryManagerSqlExtensions.GetDefaultSqlCommandRetryPolicy(RetryManager) RetryManagerSqlExtensions.GetDefaultSqlConnectionRetryStrategy(RetryManager) RetryManagerSqlExtensions.GetDefaultSqlConnectionRetryPolicy(RetryManager) RetryManagerNpgsqlExtensions.GetDefaultNpgsqlCommandRetryStrategy(RetryManager) RetryManagerNpgsqlExtensions.GetDefaultNpgsqlCommandRetryPolicy(RetryManager) RetryManagerNpgsqlExtensions.GetDefaultNpgsqlConnectionRetryStrategy(RetryManager) RetryManagerNpgsqlExtensions.GetDefaultNpgsqlConnectionRetryPolicy(RetryManager) RetryManagerMySqlExtensions.GetDefaultMySqlCommandRetryStrategy(RetryManager) RetryManagerMySqlExtensions.GetDefaultMySqlCommandRetryPolicy(RetryManager) RetryManagerMySqlExtensions.GetDefaultMySqlConnectionRetryStrategy(RetryManager) RetryManagerMySqlExtensions.GetDefaultMySqlConnectionRetryPolicy(RetryManager) RetryManagerOracleExtensions.GetDefaultOracleCommandRetryStrategy(RetryManager) RetryManagerOracleExtensions.GetDefaultOracleCommandRetryPolicy(RetryManager) RetryManagerOracleExtensions.GetDefaultOracleConnectionRetryStrategy(RetryManager) RetryManagerOracleExtensions.GetDefaultOracleConnectionRetryPolicy(RetryManager)"
  },
  "api/MilestoneTG.TransientFaultHandling.RetryLimitExceededException.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.RetryLimitExceededException.html",
    "title": "Class RetryLimitExceededException | Transient Fault Handling",
    "keywords": "Class RetryLimitExceededException The special type of exception that provides managed exit from a retry loop. The user code can use this exception to notify the retry policy that no further retry attempts are required. Inheritance System.Object System.Exception RetryLimitExceededException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax [Obsolete(\"You should use cancellation tokens or other means of stopping the retry loop.\")] public sealed class RetryLimitExceededException : Exception Constructors | Improve this Doc View Source RetryLimitExceededException() Initializes a new instance of the RetryLimitExceededException class with a default error message. Declaration public RetryLimitExceededException() | Improve this Doc View Source RetryLimitExceededException(Exception) Initializes a new instance of the RetryLimitExceededException class with a reference to the inner exception that is the cause of this exception. Declaration public RetryLimitExceededException(Exception innerException) Parameters Type Name Description System.Exception innerException The exception that is the cause of the current exception. | Improve this Doc View Source RetryLimitExceededException(String) Initializes a new instance of the RetryLimitExceededException class with a specified error message. Declaration public RetryLimitExceededException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source RetryLimitExceededException(String, Exception) Initializes a new instance of the RetryLimitExceededException class with a specified error message and inner exception. Declaration public RetryLimitExceededException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception."
  },
  "api/MilestoneTG.TransientFaultHandling.RetryingEventArgs.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.RetryingEventArgs.html",
    "title": "Class RetryingEventArgs | Transient Fault Handling",
    "keywords": "Class RetryingEventArgs Contains information that is required for the Retrying event. Inheritance System.Object System.EventArgs RetryingEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public class RetryingEventArgs : EventArgs Constructors | Improve this Doc View Source RetryingEventArgs(Int32, TimeSpan, Exception) Initializes a new instance of the RetryingEventArgs class. Declaration public RetryingEventArgs(int currentRetryCount, TimeSpan delay, Exception lastException) Parameters Type Name Description System.Int32 currentRetryCount The current retry attempt count. System.TimeSpan delay The delay that indicates how long the current thread will be suspended before the next iteration is invoked. System.Exception lastException The exception that caused the retry conditions to occur. Properties | Improve this Doc View Source CurrentRetryCount Gets the current retry count. Declaration public int CurrentRetryCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Delay Gets the delay that indicates how long the current thread will be suspended before the next iteration is invoked. Declaration public TimeSpan Delay { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source LastException Gets the exception that caused the retry conditions to occur. Declaration public Exception LastException { get; } Property Value Type Description System.Exception"
  },
  "api/MilestoneTG.TransientFaultHandling.RetryCondition.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.RetryCondition.html",
    "title": "Class RetryCondition | Transient Fault Handling",
    "keywords": "Class RetryCondition Defines a retry condition. Inheritance System.Object RetryCondition Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public class RetryCondition Constructors | Improve this Doc View Source RetryCondition(Boolean, TimeSpan) Declaration public RetryCondition(bool retryAllowed, TimeSpan delay) Parameters Type Name Description System.Boolean retryAllowed Is retry allowed. System.TimeSpan delay The delay that indicates how long the current thread will be suspended before. the next iteration is invoked. Properties | Improve this Doc View Source DelayBeforeRetry Gets or sets the retry interval value for retry. Declaration public TimeSpan DelayBeforeRetry { get; set; } Property Value Type Description System.TimeSpan | Improve this Doc View Source RetryAllowed Gets or sets a value indicating whether retry attempt is allowed. Declaration public bool RetryAllowed { get; set; } Property Value Type Description System.Boolean"
  },
  "api/MilestoneTG.TransientFaultHandling.ITransientErrorDetectionStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.ITransientErrorDetectionStrategy.html",
    "title": "Interface ITransientErrorDetectionStrategy | Transient Fault Handling",
    "keywords": "Interface ITransientErrorDetectionStrategy Defines an interface that must be implemented by custom components responsible for detecting specific transient conditions. Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public interface ITransientErrorDetectionStrategy Methods | Improve this Doc View Source IsTransient(Exception) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration bool IsTransient(Exception ex) Parameters Type Name Description System.Exception ex The exception object to be verified. Returns Type Description System.Boolean true if the specified exception is considered as transient; otherwise, false."
  },
  "api/MilestoneTG.TransientFaultHandling.Http.HttpRetryPolicyOptions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Http.HttpRetryPolicyOptions.html",
    "title": "Class HttpRetryPolicyOptions | Transient Fault Handling",
    "keywords": "Class HttpRetryPolicyOptions Class HttpRetryPolicyOptions. Implements the RetryPolicyOptions Inheritance System.Object RetryPolicyOptions HttpRetryPolicyOptions Inherited Members RetryPolicyOptions.EXPONENTIAL RetryPolicyOptions.INCREMENTAL RetryPolicyOptions.FIXED RetryPolicyOptions.Enabled RetryPolicyOptions.RetryStrategyName RetryPolicyOptions.RetryCount RetryPolicyOptions.FirstFastRetry RetryPolicyOptions.Interval RetryPolicyOptions.Increment RetryPolicyOptions.MinBackoff RetryPolicyOptions.MaxBackoff RetryPolicyOptions.DeltaBackoff System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Http Assembly : MilestoneTG.TransientFaultHandling.Http.dll Syntax public class HttpRetryPolicyOptions : RetryPolicyOptions Properties | Improve this Doc View Source IncludeServerErrors Gets or sets a value indicating whether to include server errors as transient errors. Declaration public bool IncludeServerErrors { get; set; } Property Value Type Description System.Boolean if true, server errors will be considered transient faults. Default: false | Improve this Doc View Source IncludeTimeouts Gets or sets a value indicating whether to include timeouts as transient errors. Declaration public bool IncludeTimeouts { get; set; } Property Value Type Description System.Boolean if true, timeouts will be considered transient faults. Default: true See Also RetryPolicyOptions"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.html",
    "title": "Namespace MilestoneTG.TransientFaultHandling.Data.SqlServer | Transient Fault Handling",
    "keywords": "Namespace MilestoneTG.TransientFaultHandling.Data.SqlServer Classes ReliableSqlConnection Implements transient fault handling for Microsoft SQL Server Client connections. RetryManagerSqlExtensions Extends the RetryManager class to use it with the SQL Database retry strategy. SqlCommandExtensions Provides a set of extension methods that add retry capabilities to the standard System.Data.SqlClient.SqlCommand implementation. SqlConnectionExtensions Provides a set of extension methods that add retry capabilities to the standard System.Data.SqlClient.SqlConnection implementation. SqlDatabaseTransientErrorDetectionStrategy Provides the transient error detection logic for transient faults that are specific to SQL Database. SqlServerNetworkConnectivityErrorDetectionStrategy Implements a strategy that detects network connectivity errors such as \"host not found\". ThrottlingCondition Implements an object that holds the decoded reason code returned from SQL Database when throttling conditions are encountered. Enums ThrottledResourceType Defines the types of resources in SQL Database that may be subject to throttling conditions. ThrottlingMode Defines the possible throttling modes in SQL Database. ThrottlingType Defines the possible throttling types in SQL Database."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.ThrottlingCondition.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.ThrottlingCondition.html",
    "title": "Class ThrottlingCondition | Transient Fault Handling",
    "keywords": "Class ThrottlingCondition Implements an object that holds the decoded reason code returned from SQL Database when throttling conditions are encountered. Inheritance System.Object ThrottlingCondition Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MilestoneTG.TransientFaultHandling.Data.SqlServer Assembly : MilestoneTG.TransientFaultHandling.Data.SqlServer.dll Syntax [Serializable] public class ThrottlingCondition Fields | Improve this Doc View Source ThrottlingErrorNumber Gets the error number that corresponds to the throttling conditions reported by SQL Database. Declaration public const int ThrottlingErrorNumber = 40501 Field Value Type Description System.Int32 Properties | Improve this Doc View Source IsThrottledOnCpu Gets a value that indicates whether CPU throttling was reported by SQL Database. Declaration public bool IsThrottledOnCpu { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsThrottledOnDatabaseSize Gets a value that indicates whether database size throttling was reported by SQL Database. Declaration public bool IsThrottledOnDatabaseSize { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsThrottledOnDataRead Gets a value that indicates whether data read activity throttling was reported by SQL Database. Declaration public bool IsThrottledOnDataRead { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsThrottledOnDataSpace Gets a value that indicates whether physical data file space throttling was reported by SQL Database. Declaration public bool IsThrottledOnDataSpace { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsThrottledOnLogSpace Gets a value that indicates whether physical log space throttling was reported by SQL Database. Declaration public bool IsThrottledOnLogSpace { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsThrottledOnLogWrite Gets a value that indicates whether transaction activity throttling was reported by SQL Database. Declaration public bool IsThrottledOnLogWrite { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsThrottledOnWorkerThreads Gets a value that indicates whether concurrent requests throttling was reported by SQL Database. Declaration public bool IsThrottledOnWorkerThreads { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsUnknown Gets a value that indicates whether throttling conditions were not determined with certainty. Declaration public bool IsUnknown { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ThrottledResources Gets a list of the resources in the SQL Database that were subject to throttling conditions. Declaration public IEnumerable<Tuple<ThrottledResourceType, ThrottlingType>> ThrottledResources { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Tuple < ThrottledResourceType , ThrottlingType >> | Improve this Doc View Source ThrottlingMode Gets the value that reflects the throttling mode in SQL Database. Declaration public ThrottlingMode ThrottlingMode { get; } Property Value Type Description ThrottlingMode | Improve this Doc View Source Unknown Gets an unknown throttling condition in the event that the actual throttling condition cannot be determined. Declaration public static ThrottlingCondition Unknown { get; } Property Value Type Description ThrottlingCondition Methods | Improve this Doc View Source FromError(SqlError) Determines the throttling conditions from the specified SQL error. Declaration public static ThrottlingCondition FromError(SqlError error) Parameters Type Name Description System.Data.SqlClient.SqlError error The System.Data.SqlClient.SqlError object that contains information relevant to a warning or error returned by SQL Server. Returns Type Description ThrottlingCondition An instance of the object that holds the decoded reason codes returned from SQL Database when throttling conditions were encountered. | Improve this Doc View Source FromException(SqlException) Determines throttling conditions from the specified SQL exception. Declaration public static ThrottlingCondition FromException(SqlException ex) Parameters Type Name Description System.Data.SqlClient.SqlException ex The System.Data.SqlClient.SqlException object that contains information relevant to an error returned by SQL Server when throttling conditions were encountered. Returns Type Description ThrottlingCondition An instance of the object that holds the decoded reason codes returned from SQL Database when throttling conditions were encountered. | Improve this Doc View Source FromReasonCode(Int32) Determines the throttling conditions from the specified reason code. Declaration public static ThrottlingCondition FromReasonCode(int reasonCode) Parameters Type Name Description System.Int32 reasonCode The reason code returned by SQL Database that contains the throttling mode and the exceeded resource types. Returns Type Description ThrottlingCondition An instance of the object holding the decoded reason codes returned from SQL Database when encountering throttling conditions. | Improve this Doc View Source ToString() Returns a textual representation of the current ThrottlingCondition object, including the information held with respect to throttled resources. Declaration public override string ToString() Returns Type Description System.String A string that represents the current ThrottlingCondition object. Overrides System.Object.ToString()"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.ThrottledResourceType.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.ThrottledResourceType.html",
    "title": "Enum ThrottledResourceType | Transient Fault Handling",
    "keywords": "Enum ThrottledResourceType Defines the types of resources in SQL Database that may be subject to throttling conditions. Namespace : MilestoneTG.TransientFaultHandling.Data.SqlServer Assembly : MilestoneTG.TransientFaultHandling.Data.SqlServer.dll Syntax public enum ThrottledResourceType Fields Name Description Cpu Corresponds to the \"CPU\" resource, which may be subject to throttling. DatabaseSize Corresponds to the \"Database Size\" resource, which may be subject to throttling. DataReadIoDelay Corresponds to the \"Database Read IO Delay\" resource, which may be subject to throttling. Internal Corresponds to an internal resource that may be subject to throttling. LogWriteIoDelay Corresponds to the \"Transaction Log Write IO Delay\" resource, which may be subject to throttling. PhysicalDatabaseSpace Corresponds to the \"Physical Database Space\" resource, which may be subject to throttling. PhysicalLogSpace Corresponds to the \"Physical Log File Space\" resource, which may be subject to throttling. Unknown Corresponds to an unknown resource type in the event that the actual resource cannot be determined with certainty. WorkerThreads Corresponds to the \"SQL Worker Thread Pool\" resource, which may be subject to throttling."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.SqlConnectionExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.SqlConnectionExtensions.html",
    "title": "Class SqlConnectionExtensions | Transient Fault Handling",
    "keywords": "Class SqlConnectionExtensions Provides a set of extension methods that add retry capabilities to the standard System.Data.SqlClient.SqlConnection implementation. Inheritance System.Object SqlConnectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.SqlServer Assembly : MilestoneTG.TransientFaultHandling.Data.SqlServer.dll Syntax public static class SqlConnectionExtensions Methods | Improve this Doc View Source OpenWithRetry(SqlConnection) Opens a database connection with the connection settings specified in the ConnectionString property of the connection object. Uses the default retry policy when opening the connection. Declaration public static void OpenWithRetry(this SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection The connection object that is required for the extension method declaration. | Improve this Doc View Source OpenWithRetryAsync(SqlConnection) Opens a database connection with the connection settings specified in the ConnectionString property of the connection object. Uses the default retry policy when opening the connection. Declaration public static Task OpenWithRetryAsync(this SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection The connection object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Postgres.ReliableNpgsqlConnection.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Postgres.ReliableNpgsqlConnection.html",
    "title": "Class ReliableNpgsqlConnection | Transient Fault Handling",
    "keywords": "Class ReliableNpgsqlConnection Inheritance System.Object ReliableDbConnection ReliableNpgsqlConnection Implements System.Data.IDbConnection System.IDisposable System.ICloneable Inherited Members ReliableDbConnection.ConnectionString ReliableDbConnection.ConnectionRetryPolicy ReliableDbConnection.CommandRetryPolicy ReliableDbConnection.Current ReliableDbConnection.SessionTracingId ReliableDbConnection.ConnectionTimeout ReliableDbConnection.Database ReliableDbConnection.State ReliableDbConnection.Open() ReliableDbConnection.OpenAsync() ReliableDbConnection.Open(RetryPolicy) ReliableDbConnection.OpenAsync(RetryPolicy) ReliableDbConnection.ExecuteCommand<T>(IDbCommand) ReliableDbConnection.ExecuteCommand<T>(IDbCommand, CommandBehavior) ReliableDbConnection.ExecuteCommand<T>(IDbCommand, RetryPolicy) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand, CommandBehavior) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand, RetryPolicy) ReliableDbConnection.ExecuteCommand<T>(IDbCommand, RetryPolicy, CommandBehavior) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand, RetryPolicy, CommandBehavior) ReliableDbConnection.ExecuteXmlReader<T>(IDbCommand, CommandBehavior, Boolean) ReliableDbConnection.ExecuteXmlReaderAsync<T>(IDbCommand, CommandBehavior, Boolean) ReliableDbConnection.ExecuteCommand(IDbCommand) ReliableDbConnection.ExecuteCommand(IDbCommand, RetryPolicy) ReliableDbConnection.BeginTransaction(IsolationLevel) ReliableDbConnection.BeginTransaction() ReliableDbConnection.ChangeDatabase(String) ReliableDbConnection.IDbConnection.Open() ReliableDbConnection.Close() ReliableDbConnection.CreateCommand() ReliableDbConnection.IDbConnection.CreateCommand() ReliableDbConnection.ICloneable.Clone() ReliableDbConnection.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.Postgres Assembly : MilestoneTG.TransientFaultHandling.Data.Postgres.dll Syntax public class ReliableNpgsqlConnection : ReliableDbConnection, IDbConnection, IDisposable, ICloneable Constructors | Improve this Doc View Source ReliableNpgsqlConnection(String) Initializes a new instance of the ReliableNpgsqlConnection class. Declaration public ReliableNpgsqlConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection string. | Improve this Doc View Source ReliableNpgsqlConnection(String, RetryPolicy) Initializes a new instance of the ReliableNpgsqlConnection class. Declaration public ReliableNpgsqlConnection(string connectionString, RetryPolicy retryPolicy) Parameters Type Name Description System.String connectionString The connection string. RetryPolicy retryPolicy The retry policy. | Improve this Doc View Source ReliableNpgsqlConnection(String, RetryPolicy, RetryPolicy) Initializes a new instance of the ReliableNpgsqlConnection class. Declaration public ReliableNpgsqlConnection(string connectionString, RetryPolicy connectionRetryPolicy, RetryPolicy commandRetryPolicy) Parameters Type Name Description System.String connectionString The connection string used to open the Npgsql Database. RetryPolicy connectionRetryPolicy The retry policy that defines whether to retry a request if a connection fails to be established. RetryPolicy commandRetryPolicy The retry policy that defines whether to retry a request if a command fails to be executed. Methods | Improve this Doc View Source Clone() Clones this instance. Declaration protected override ReliableDbConnection Clone() Returns Type Description ReliableDbConnection ReliableDbConnection. Overrides ReliableDbConnection.Clone() | Improve this Doc View Source CreateConnection(String) Creates the connection. Declaration protected override DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection string. Returns Type Description System.Data.Common.DbConnection DbConnection. Overrides ReliableDbConnection.CreateConnection(String) | Improve this Doc View Source CreateConnectionStringFailoverPolicy() Creates the connection string failover policy. Declaration protected override RetryPolicy CreateConnectionStringFailoverPolicy() Returns Type Description RetryPolicy RetryPolicy. Overrides ReliableDbConnection.CreateConnectionStringFailoverPolicy() Implements System.Data.IDbConnection System.IDisposable System.ICloneable"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Postgres.NpgsqlCommandExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Postgres.NpgsqlCommandExtensions.html",
    "title": "Class NpgsqlCommandExtensions | Transient Fault Handling",
    "keywords": "Class NpgsqlCommandExtensions Provides a set of extension methods that add retry capabilities to the standard System.Data.SqlClient.SqlCommand implementation. Inheritance System.Object NpgsqlCommandExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.Postgres Assembly : MilestoneTG.TransientFaultHandling.Data.Postgres.dll Syntax public static class NpgsqlCommandExtensions Methods | Improve this Doc View Source ExecuteNonQueryWithRetry(NpgsqlCommand) Executes a Transact-Npgsql statement against the connection and returns the number of rows affected. Uses the default retry policy when executing the command. Declaration public static int ExecuteNonQueryWithRetry(this NpgsqlCommand command) Parameters Type Name Description Npgsql.NpgsqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Int32 The number of rows affected. | Improve this Doc View Source ExecuteNonQueryWithRetryAsync(NpgsqlCommand) Executes a Transact-Npgsql statement against the connection and returns the number of rows affected. Uses the default retry policy when executing the command. Declaration public static Task<int> ExecuteNonQueryWithRetryAsync(this NpgsqlCommand command) Parameters Type Name Description Npgsql.NpgsqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < System.Int32 > The number of rows affected. | Improve this Doc View Source ExecuteReaderWithRetry(NpgsqlCommand) Sends the specified command to the connection and builds a NpgsqlDataReader object that contains the results. Uses the default retry policy when executing the command. Declaration public static NpgsqlDataReader ExecuteReaderWithRetry(this NpgsqlCommand command) Parameters Type Name Description Npgsql.NpgsqlCommand command The command object that is required for the extension method declaration. Returns Type Description Npgsql.NpgsqlDataReader A System.Data.NpgsqlClient.NpgsqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetry(NpgsqlCommand, CommandBehavior) Sends the specified command to the connection and builds a NpgsqlDataReader object by using the specified command behavior. Uses the default retry policy when executing the command. Declaration public static NpgsqlDataReader ExecuteReaderWithRetry(this NpgsqlCommand command, CommandBehavior behavior) Parameters Type Name Description Npgsql.NpgsqlCommand command The command object that is required for the extension method declaration. System.Data.CommandBehavior behavior One of the enumeration values that specifies the command behavior. Returns Type Description Npgsql.NpgsqlDataReader A System.Data.NpgsqlClient.NpgsqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetryAsync(NpgsqlCommand) Sends the specified command to the connection and builds a NpgsqlDataReader object that contains the results. Uses the default retry policy when executing the command. Declaration public static Task<NpgsqlDataReader> ExecuteReaderWithRetryAsync(this NpgsqlCommand command) Parameters Type Name Description Npgsql.NpgsqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < Npgsql.NpgsqlDataReader > A System.Data.NpgsqlClient.NpgsqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetryAsync(NpgsqlCommand, CommandBehavior) Sends the specified command to the connection and builds a NpgsqlDataReader object by using the specified command behavior. Uses the default retry policy when executing the command. Declaration public static Task<NpgsqlDataReader> ExecuteReaderWithRetryAsync(this NpgsqlCommand command, CommandBehavior behavior) Parameters Type Name Description Npgsql.NpgsqlCommand command The command object that is required for the extension method declaration. System.Data.CommandBehavior behavior One of the enumeration values that specifies the command behavior. Returns Type Description System.Threading.Tasks.Task < Npgsql.NpgsqlDataReader > A System.Data.NpgsqlClient.NpgsqlDataReader object. | Improve this Doc View Source ExecuteScalarWithRetry(NpgsqlCommand) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Uses the default retry policy when executing the command. Declaration public static object ExecuteScalarWithRetry(this NpgsqlCommand command) Parameters Type Name Description Npgsql.NpgsqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Object The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters. | Improve this Doc View Source ExecuteScalarWithRetryAsync(NpgsqlCommand) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Uses the default retry policy when executing the command. Declaration public static Task<object> ExecuteScalarWithRetryAsync(this NpgsqlCommand command) Parameters Type Name Description Npgsql.NpgsqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < System.Object > The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Oracle.OracleConnectionExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Oracle.OracleConnectionExtensions.html",
    "title": "Class OracleConnectionExtensions | Transient Fault Handling",
    "keywords": "Class OracleConnectionExtensions Provides a set of extension methods that add retry capabilities to the standard System.Data.SqlClient.SqlConnection implementation. Inheritance System.Object OracleConnectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data.Oracle Assembly : MilestoneTG.TransientFaultHandling.Data.Oracle.dll Syntax public static class OracleConnectionExtensions Methods | Improve this Doc View Source OpenWithRetry(OracleConnection) Opens a database connection with the connection settings specified in the ConnectionString property of the connection object. Uses the default retry policy when opening the connection. Declaration public static void OpenWithRetry(this OracleConnection connection) Parameters Type Name Description Oracle.ManagedDataAccess.Client.OracleConnection connection The connection object that is required for the extension method declaration. | Improve this Doc View Source OpenWithRetryAsync(OracleConnection) Opens a database connection with the connection settings specified in the ConnectionString property of the connection object. Uses the default retry policy when opening the connection. Declaration public static Task OpenWithRetryAsync(this OracleConnection connection) Parameters Type Name Description Oracle.ManagedDataAccess.Client.OracleConnection connection The connection object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.MySql.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.MySql.html",
    "title": "Namespace MilestoneTG.TransientFaultHandling.Data.MySql | Transient Fault Handling",
    "keywords": "Namespace MilestoneTG.TransientFaultHandling.Data.MySql Classes MySqlCommandExtensions Provides a set of extension methods that add retry capabilities to the standard System.Data.SqlClient.SqlCommand implementation. MySqlConnectionExtensions Provides a set of extension methods that add retry capabilities to the standard implementation. MySqlDatabaseTransientErrorDetectionStrategy Provides the transient error detection logic for transient faults that are specific to SQL Database. ReliableMySqlConnection RetryManagerMySqlExtensions Extends the RetryManager class to use it with the MySql Database retry strategy."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.MySql.MySqlConnectionExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.MySql.MySqlConnectionExtensions.html",
    "title": "Class MySqlConnectionExtensions | Transient Fault Handling",
    "keywords": "Class MySqlConnectionExtensions Provides a set of extension methods that add retry capabilities to the standard implementation. Inheritance System.Object MySqlConnectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.MySql Assembly : MilestoneTG.TransientFaultHandling.Data.MySql.dll Syntax public static class MySqlConnectionExtensions Methods | Improve this Doc View Source OpenWithRetry(MySqlConnection) Opens a database connection with the connection settings specified in the ConnectionString property of the connection object. Uses the default retry policy when opening the connection. Declaration public static void OpenWithRetry(this MySqlConnection connection) Parameters Type Name Description MySql.Data.MySqlClient.MySqlConnection connection The connection object that is required for the extension method declaration. | Improve this Doc View Source OpenWithRetryAsync(MySqlConnection) Opens a database connection with the connection settings specified in the ConnectionString property of the connection object. Uses the default retry policy when opening the connection. Declaration public static Task OpenWithRetryAsync(this MySqlConnection connection) Parameters Type Name Description MySql.Data.MySqlClient.MySqlConnection connection The connection object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.DbConnectionExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.DbConnectionExtensions.html",
    "title": "Class DbConnectionExtensions | Transient Fault Handling",
    "keywords": "Class DbConnectionExtensions DbConnection Extension methods. Inheritance System.Object DbConnectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data Assembly : MilestoneTG.TransientFaultHandling.Data.dll Syntax public static class DbConnectionExtensions Methods | Improve this Doc View Source OpenWithRetry(DbConnection, RetryPolicy) Opens a database connection with the connection settings specified in the ConnectionString property of the connection object. Uses the specified retry policy when opening the connection. Declaration public static void OpenWithRetry(this DbConnection connection, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.Common.DbConnection connection The connection object that is required for the extension method declaration. RetryPolicy retryPolicy The retry policy that defines whether to retry a request if the connection fails. | Improve this Doc View Source OpenWithRetryAsync(DbConnection, RetryPolicy) Opens a database connection with the connection settings specified in the ConnectionString property of the connection object. Uses the specified retry policy when opening the connection. Declaration public static Task OpenWithRetryAsync(this DbConnection connection, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.Common.DbConnection connection The connection object that is required for the extension method declaration. RetryPolicy retryPolicy The retry policy that defines whether to retry a request if the connection fails. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.html": {
    "href": "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.html",
    "title": "Namespace MilestoneTG.NHibernate.TransientFaultHandling.SqlServer | Transient Fault Handling",
    "keywords": "Namespace MilestoneTG.NHibernate.TransientFaultHandling.SqlServer Classes DefaultReliableSql2008ClientDriver<TTransientErrorDetectionStrategy> Default retry logic implementation for a ReliableSqlConnection that allows you to specify the transient error detection strategy. ReliableAdoNetTransactionFactory An NHibernate transaction factory that provides retry logic for transient errors when executing transactions. ReliableAdoTransaction Provides a transaction implementation that includes transient fault-handling retry logic. ReliableSql2008ClientDriver Abstract base class that enables the creation of an NHibernate client driver that extends the Sql 2008 driver, but adds in transient fault handling retry logic via ReliableSqlConnection . ReliableSqlCommand An System.Data.IDbCommand implementation that wraps a System.Data.SqlClient.SqlCommand object such that any queries that are executed are executed via a ReliableSqlConnection . ReliableSqlDbConnection Wrap ReliableSqlConnection in a class that extends System.Data.Common.DbConnection so internal type casts within NHibernate don't fail. SqlAzureClientDriver NHibernate client driver for SQL Azure that includes the Enterprise Library transient fault-handling. Note: It doesn't handle timeout errors, which can sometimes be transient. If you have timeout errors that aren't caused by unoptimized queries then use SqlAzureClientDriverWithTimeoutRetries NHibernate client driver for SQL Azure that includes the Enterprise Library transient fault-handling as well as timeout retries. Note: Timeout errors can be caused by unoptimised queries that you might be executing as well as being a transient exception. SqlAzureTransientErrorDetectionStrategy Transient error detection strategy for SQL Azure that is a copy of the Enterprise Library detection strategy. SqlAzureTransientErrorDetectionStrategyWithTimeouts Transient error detection strategy for SQL Azure that extends the Enterprise Library detection strategy and also detects timeout exceptions."
  },
  "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.SqlAzureTransientErrorDetectionStrategy.html": {
    "href": "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.SqlAzureTransientErrorDetectionStrategy.html",
    "title": "Class SqlAzureTransientErrorDetectionStrategy | Transient Fault Handling",
    "keywords": "Class SqlAzureTransientErrorDetectionStrategy Transient error detection strategy for SQL Azure that is a copy of the Enterprise Library detection strategy. Inheritance System.Object SqlAzureTransientErrorDetectionStrategy SqlAzureTransientErrorDetectionStrategyWithTimeouts Implements ITransientErrorDetectionStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer Assembly : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.dll Syntax public class SqlAzureTransientErrorDetectionStrategy : ITransientErrorDetectionStrategy Methods | Improve this Doc View Source IsTransient(Exception) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration public virtual bool IsTransient(Exception ex) Parameters Type Name Description System.Exception ex The exception object to be verified. Returns Type Description System.Boolean true if the specified exception is considered as transient; otherwise, false. Implements ITransientErrorDetectionStrategy"
  },
  "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.ReliableSqlCommand.html": {
    "href": "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.ReliableSqlCommand.html",
    "title": "Class ReliableSqlCommand | Transient Fault Handling",
    "keywords": "Class ReliableSqlCommand An System.Data.IDbCommand implementation that wraps a System.Data.SqlClient.SqlCommand object such that any queries that are executed are executed via a ReliableSqlConnection . Inheritance System.Object System.MarshalByRefObject System.ComponentModel.Component System.Data.Common.DbCommand ReliableSqlCommand Implements System.ComponentModel.IComponent System.Data.IDbCommand System.IDisposable Inherited Members System.Data.Common.DbCommand.CreateParameter() System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken) System.Data.Common.DbCommand.ExecuteNonQueryAsync() System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken) System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior) System.Data.Common.DbCommand.ExecuteReaderAsync() System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior) System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken) System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken) System.Data.Common.DbCommand.ExecuteScalarAsync() System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken) System.Data.Common.DbCommand.System.Data.IDbCommand.CreateParameter() System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader() System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior) System.Data.Common.DbCommand.Connection System.Data.Common.DbCommand.Parameters System.Data.Common.DbCommand.System.Data.IDbCommand.Connection System.Data.Common.DbCommand.System.Data.IDbCommand.Parameters System.Data.Common.DbCommand.System.Data.IDbCommand.Transaction System.Data.Common.DbCommand.Transaction System.ComponentModel.Component.Dispose() System.ComponentModel.Component.Dispose(System.Boolean) System.ComponentModel.Component.GetService(System.Type) System.ComponentModel.Component.ToString() System.ComponentModel.Component.CanRaiseEvents System.ComponentModel.Component.Container System.ComponentModel.Component.DesignMode System.ComponentModel.Component.Events System.ComponentModel.Component.Site System.ComponentModel.Component.Disposed System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer Assembly : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.dll Syntax public class ReliableSqlCommand : DbCommand, IComponent, IDbCommand, IDisposable Remarks Note: For this to work it requires that the Connection property be set with a ReliableSqlConnection object. Constructors | Improve this Doc View Source ReliableSqlCommand() Constructs a ReliableSqlCommand . Declaration public ReliableSqlCommand() Properties | Improve this Doc View Source CommandText Gets or sets the text command to run against the data source. Declaration public override string CommandText { get; set; } Property Value Type Description System.String The command text. Overrides System.Data.Common.DbCommand.CommandText | Improve this Doc View Source CommandTimeout Gets or sets the wait time before terminating the attempt to execute a command and generating an error. Declaration public override int CommandTimeout { get; set; } Property Value Type Description System.Int32 The command timeout. Overrides System.Data.Common.DbCommand.CommandTimeout | Improve this Doc View Source CommandType Indicates or specifies how the System.Data.Common.DbCommand.CommandText property is interpreted. Declaration public override CommandType CommandType { get; set; } Property Value Type Description System.Data.CommandType The type of the command. Overrides System.Data.Common.DbCommand.CommandType | Improve this Doc View Source Current The underlying System.Data.SqlClient.SqlCommand being proxied. Declaration public SqlCommand Current { get; } Property Value Type Description System.Data.SqlClient.SqlCommand The current. | Improve this Doc View Source DbConnection Returns the underlying System.Data.SqlClient.SqlConnection and expects a ReliableSqlConnection when being set. Declaration protected override DbConnection DbConnection { get; set; } Property Value Type Description System.Data.Common.DbConnection The database connection. Overrides System.Data.Common.DbCommand.DbConnection | Improve this Doc View Source DbParameterCollection Gets the collection of System.Data.Common.DbParameter objects. Declaration protected override DbParameterCollection DbParameterCollection { get; } Property Value Type Description System.Data.Common.DbParameterCollection The database parameter collection. Overrides System.Data.Common.DbCommand.DbParameterCollection | Improve this Doc View Source DbTransaction Gets or sets the System.Data.Common.DbCommand.DbTransaction within which this System.Data.Common.DbCommand object executes. Declaration protected override DbTransaction DbTransaction { get; set; } Property Value Type Description System.Data.Common.DbTransaction The database transaction. Overrides System.Data.Common.DbCommand.DbTransaction | Improve this Doc View Source DesignTimeVisible Gets or sets a value indicating whether the command object should be visible in a customized interface control. Declaration public override bool DesignTimeVisible { get; set; } Property Value Type Description System.Boolean true if [design time visible]; otherwise, false . Overrides System.Data.Common.DbCommand.DesignTimeVisible | Improve this Doc View Source ReliableConnection The ReliableSqlConnection that has been assigned to the command via the Connection property. Declaration public ReliableSqlConnection ReliableConnection { get; set; } Property Value Type Description ReliableSqlConnection The reliable connection. | Improve this Doc View Source UpdatedRowSource Gets or sets how command results are applied to the System.Data.DataRow when used by the Update method of a System.Data.Common.DbDataAdapter . Declaration public override UpdateRowSource UpdatedRowSource { get; set; } Property Value Type Description System.Data.UpdateRowSource The updated row source. Overrides System.Data.Common.DbCommand.UpdatedRowSource Methods | Improve this Doc View Source Cancel() Attempts to cancels the execution of a System.Data.Common.DbCommand . Declaration public override void Cancel() Overrides System.Data.Common.DbCommand.Cancel() | Improve this Doc View Source CreateDbParameter() Creates a new instance of a System.Data.Common.DbParameter object. Declaration protected override DbParameter CreateDbParameter() Returns Type Description System.Data.Common.DbParameter A System.Data.Common.DbParameter object. Overrides System.Data.Common.DbCommand.CreateDbParameter() | Improve this Doc View Source ExecuteDbDataReader(CommandBehavior) Executes the command text against the connection. Declaration protected override DbDataReader ExecuteDbDataReader(CommandBehavior behavior) Parameters Type Name Description System.Data.CommandBehavior behavior An instance of System.Data.CommandBehavior . Returns Type Description System.Data.Common.DbDataReader A task representing the operation. Overrides System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior) | Improve this Doc View Source ExecuteNonQuery() Executes a SQL statement against a connection object. Declaration public override int ExecuteNonQuery() Returns Type Description System.Int32 The number of rows affected. Overrides System.Data.Common.DbCommand.ExecuteNonQuery() | Improve this Doc View Source ExecuteReader() Executes the System.Data.IDbCommand.CommandText against the System.Data.IDbCommand.Connection and builds an System.Data.IDataReader . Declaration public IDataReader ExecuteReader() Returns Type Description System.Data.IDataReader An System.Data.IDataReader object. | Improve this Doc View Source ExecuteScalar() Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored. Declaration public override object ExecuteScalar() Returns Type Description System.Object The first column of the first row in the result set. Overrides System.Data.Common.DbCommand.ExecuteScalar() | Improve this Doc View Source Prepare() Creates a prepared (or compiled) version of the command on the data source. Declaration public override void Prepare() Overrides System.Data.Common.DbCommand.Prepare() Operators | Improve this Doc View Source Explicit(ReliableSqlCommand to SqlCommand) Explicit type-casting between a ReliableSqlCommand and a System.Data.SqlClient.SqlCommand . Declaration public static explicit operator SqlCommand(ReliableSqlCommand command) Parameters Type Name Description ReliableSqlCommand command The ReliableSqlCommand being casted Returns Type Description System.Data.SqlClient.SqlCommand The underlying System.Data.SqlClient.SqlCommand being proxied. Implements System.ComponentModel.IComponent System.Data.IDbCommand System.IDisposable See Also System.Data.Common.DbCommand"
  },
  "api/MilestoneTG.TransientFaultHandling.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.html",
    "title": "Namespace MilestoneTG.TransientFaultHandling | Transient Fault Handling",
    "keywords": "Namespace MilestoneTG.TransientFaultHandling Classes ExponentialBackoffRetryStrategy A retry strategy with backoff parameters for calculating the exponential delay between retries. FixedIntervalRetryStrategy Represents a retry strategy with a specified number of retry attempts and a default, fixed time interval between retries. IncrementalRetryStrategy A retry strategy with a specified number of retry attempts and an incremental time interval between retries. RetryCondition Defines a retry condition. RetryingEventArgs Contains information that is required for the Retrying event. RetryLimitExceededException The special type of exception that provides managed exit from a retry loop. The user code can use this exception to notify the retry policy that no further retry attempts are required. RetryManager Provides the entry point to the retry functionality. RetryPolicy Provides the base implementation of the retry mechanism for unreliable actions and transient conditions. RetryPolicy<T> Provides a generic version of the RetryPolicy class. RetryPolicyOptions Supports creating a retry policy using configuration. RetryStrategy Represents a retry strategy that determines the number of retry attempts and the interval between retries. TransientErrorIgnoreStrategy Retry strategy that ignores any transient errors. Interfaces ITransientErrorDetectionStrategy Defines an interface that must be implemented by custom components responsible for detecting specific transient conditions. Delegates ShouldRetryHandler Defines a callback delegate that will be invoked whenever a retry condition is encountered."
  },
  "api/MilestoneTG.TransientFaultHandling.TransientErrorIgnoreStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.TransientErrorIgnoreStrategy.html",
    "title": "Class TransientErrorIgnoreStrategy | Transient Fault Handling",
    "keywords": "Class TransientErrorIgnoreStrategy Retry strategy that ignores any transient errors. Inheritance System.Object TransientErrorIgnoreStrategy Implements ITransientErrorDetectionStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public class TransientErrorIgnoreStrategy : ITransientErrorDetectionStrategy Methods | Improve this Doc View Source IsTransient(Exception) Always returns false. Declaration public bool IsTransient(Exception ex) Parameters Type Name Description System.Exception ex The exception. Returns Type Description System.Boolean Always false. Implements ITransientErrorDetectionStrategy"
  },
  "api/MilestoneTG.TransientFaultHandling.ShouldRetryHandler.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.ShouldRetryHandler.html",
    "title": "Delegate ShouldRetryHandler | Transient Fault Handling",
    "keywords": "Delegate ShouldRetryHandler Defines a callback delegate that will be invoked whenever a retry condition is encountered. Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public delegate RetryCondition ShouldRetryHandler(int retryCount, Exception lastException); Parameters Type Name Description System.Int32 retryCount The current retry attempt count. System.Exception lastException The exception that caused the retry conditions to occur. Returns Type Description RetryCondition A retry condition instance"
  },
  "api/MilestoneTG.TransientFaultHandling.RetryStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.RetryStrategy.html",
    "title": "Class RetryStrategy | Transient Fault Handling",
    "keywords": "Class RetryStrategy Represents a retry strategy that determines the number of retry attempts and the interval between retries. Inheritance System.Object RetryStrategy ExponentialBackoffRetryStrategy FixedIntervalRetryStrategy IncrementalRetryStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public abstract class RetryStrategy Constructors | Improve this Doc View Source RetryStrategy(String, Boolean) Initializes a new instance of the RetryStrategy class. Declaration protected RetryStrategy(string name, bool firstFastRetry) Parameters Type Name Description System.String name The name of the retry strategy. System.Boolean firstFastRetry true to immediately retry in the first attempt; otherwise, false. The subsequent retries will remain subject to the configured retry interval. Fields | Improve this Doc View Source DefaultClientRetryCount Represents the default number of retry attempts. Declaration public static readonly int DefaultClientRetryCount Field Value Type Description System.Int32 | Improve this Doc View Source DefaultFirstFastRetry Represents the default flag indicating whether the first retry attempt will be made immediately, whereas subsequent retries will remain subject to the retry interval. Declaration public static readonly bool DefaultFirstFastRetry Field Value Type Description System.Boolean | Improve this Doc View Source DefaultRetryInterval Represents the default interval between retries. Declaration public static readonly TimeSpan DefaultRetryInterval Field Value Type Description System.TimeSpan Properties | Improve this Doc View Source FastFirstRetry Gets or sets a value indicating whether the first retry attempt will be made immediately, whereas subsequent retries will remain subject to the retry interval. Declaration public bool FastFirstRetry { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets the name of the retry strategy. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source NoRetry Returns a default policy that performs no retries, but invokes the action only once. Declaration public static RetryStrategy NoRetry { get; } Property Value Type Description RetryStrategy Methods | Improve this Doc View Source GetShouldRetryHandler() Returns the corresponding ShouldRetry delegate. Declaration public abstract ShouldRetryHandler GetShouldRetryHandler() Returns Type Description ShouldRetryHandler The ShouldRetry delegate."
  },
  "api/MilestoneTG.TransientFaultHandling.IncrementalRetryStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.IncrementalRetryStrategy.html",
    "title": "Class IncrementalRetryStrategy | Transient Fault Handling",
    "keywords": "Class IncrementalRetryStrategy A retry strategy with a specified number of retry attempts and an incremental time interval between retries. Inheritance System.Object RetryStrategy IncrementalRetryStrategy Inherited Members RetryStrategy.DefaultClientRetryCount RetryStrategy.DefaultRetryInterval RetryStrategy.DefaultFirstFastRetry RetryStrategy.NoRetry RetryStrategy.FastFirstRetry RetryStrategy.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public class IncrementalRetryStrategy : RetryStrategy Constructors | Improve this Doc View Source IncrementalRetryStrategy() Initializes a new instance of the IncrementalRetryStrategy class. Declaration public IncrementalRetryStrategy() | Improve this Doc View Source IncrementalRetryStrategy(Int32, TimeSpan, TimeSpan) Initializes a new instance of the IncrementalRetryStrategy class with the specified retry settings. Declaration public IncrementalRetryStrategy(int retryCount, TimeSpan initialInterval, TimeSpan increment) Parameters Type Name Description System.Int32 retryCount The number of retry attempts. System.TimeSpan initialInterval The initial interval that will apply for the first retry. System.TimeSpan increment The incremental time value that will be used to calculate the progressive delay between retries. | Improve this Doc View Source IncrementalRetryStrategy(String, Int32, TimeSpan, TimeSpan) Initializes a new instance of the IncrementalRetryStrategy class with the specified name and retry settings. Declaration public IncrementalRetryStrategy(string name, int retryCount, TimeSpan initialInterval, TimeSpan increment) Parameters Type Name Description System.String name The retry strategy name. System.Int32 retryCount The number of retry attempts. System.TimeSpan initialInterval The initial interval that will apply for the first retry. System.TimeSpan increment The incremental time value that will be used to calculate the progressive delay between retries. | Improve this Doc View Source IncrementalRetryStrategy(String, Int32, TimeSpan, TimeSpan, Boolean) Initializes a new instance of the IncrementalRetryStrategy class with the specified number of retry attempts, time interval, retry strategy, and fast start option. Declaration public IncrementalRetryStrategy(string name, int retryCount, TimeSpan initialInterval, TimeSpan increment, bool firstFastRetry) Parameters Type Name Description System.String name The retry strategy name. System.Int32 retryCount The number of retry attempts. System.TimeSpan initialInterval The initial interval that will apply for the first retry. System.TimeSpan increment The incremental time value that will be used to calculate the progressive delay between retries. System.Boolean firstFastRetry true to immediately retry in the first attempt; otherwise, false. The subsequent retries will remain subject to the configured retry interval. Fields | Improve this Doc View Source DefaultRetryIncrement Represents the default time increment between retry attempts in the progressive delay policy. Declaration public static readonly TimeSpan DefaultRetryIncrement Field Value Type Description System.TimeSpan Methods | Improve this Doc View Source GetShouldRetryHandler() Returns the corresponding ShouldRetry delegate. Declaration public override ShouldRetryHandler GetShouldRetryHandler() Returns Type Description ShouldRetryHandler The ShouldRetry delegate. Overrides RetryStrategy.GetShouldRetryHandler()"
  },
  "api/MilestoneTG.TransientFaultHandling.Http.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Http.html",
    "title": "Namespace MilestoneTG.TransientFaultHandling.Http | Transient Fault Handling",
    "keywords": "Namespace MilestoneTG.TransientFaultHandling.Http Classes HttpRequestWithStatusException Inherits HttpRequestException adding HttpStatusCode to the exception. HttpRetryPolicyOptions Class HttpRetryPolicyOptions. Implements the RetryPolicyOptions HttpStatusCodeErrorDetectionStrategy Default Http error detection strategy based on Http Status Code. RetryDelegatingHandler Http retry handler."
  },
  "api/MilestoneTG.TransientFaultHandling.Http.RetryDelegatingHandler.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Http.RetryDelegatingHandler.html",
    "title": "Class RetryDelegatingHandler | Transient Fault Handling",
    "keywords": "Class RetryDelegatingHandler Http retry handler. Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler RetryDelegatingHandler Implements System.IDisposable Inherited Members System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Http Assembly : MilestoneTG.TransientFaultHandling.Http.dll Syntax public class RetryDelegatingHandler : DelegatingHandler, IDisposable Constructors | Improve this Doc View Source RetryDelegatingHandler() Initializes a new instance of the RetryDelegatingHandler class. Sets default retry policy base on Exponential Backoff. Declaration public RetryDelegatingHandler() | Improve this Doc View Source RetryDelegatingHandler(HttpRetryPolicyOptions) Initializes a new instance of the RetryDelegatingHandler class using the supplied options. Declaration public RetryDelegatingHandler(HttpRetryPolicyOptions options) Parameters Type Name Description HttpRetryPolicyOptions options | Improve this Doc View Source RetryDelegatingHandler(RetryPolicy) Initializes a new instance of the RetryDelegatingHandler class. Declaration public RetryDelegatingHandler(RetryPolicy retryPolicy) Parameters Type Name Description RetryPolicy retryPolicy Retry policy to use. | Improve this Doc View Source RetryDelegatingHandler(RetryPolicy, HttpMessageHandler) Initializes a new instance of the RetryDelegatingHandler class with the provided RetryPolicy and sets the InnerHandler to the provided HttpMessageHandler. Declaration public RetryDelegatingHandler(RetryPolicy retryPolicy, HttpMessageHandler innerHandler) Parameters Type Name Description RetryPolicy retryPolicy Retry policy to use. System.Net.Http.HttpMessageHandler innerHandler Inner http handler. | Improve this Doc View Source RetryDelegatingHandler(HttpMessageHandler) Initializes a new instance of the RetryDelegatingHandler class. Sets the default retry policy base on Exponential Backoff. Sets the InnerHandler to the provided HttpMessageHandler. Declaration public RetryDelegatingHandler(HttpMessageHandler innerHandler) Parameters Type Name Description System.Net.Http.HttpMessageHandler innerHandler Inner http handler. Properties | Improve this Doc View Source RetryPolicy Gets or sets retry policy. Declaration public RetryPolicy RetryPolicy { get; set; } Property Value Type Description RetryPolicy Methods | Improve this Doc View Source SendAsync(HttpRequestMessage, CancellationToken) Sends an HTTP request to the inner handler to send to the server as an asynchronous operation. Retries request if needed based on Retry Policy. Declaration protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The HTTP request message to send to the server. System.Threading.CancellationToken cancellationToken A cancellation token to cancel operation. Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Returns System.Threading.Tasks.Task<TResult>. The task object representing the asynchronous operation. Overrides System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken) Implements System.IDisposable"
  },
  "api/MilestoneTG.TransientFaultHandling.Http.HttpStatusCodeErrorDetectionStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Http.HttpStatusCodeErrorDetectionStrategy.html",
    "title": "Class HttpStatusCodeErrorDetectionStrategy | Transient Fault Handling",
    "keywords": "Class HttpStatusCodeErrorDetectionStrategy Default Http error detection strategy based on Http Status Code. Inheritance System.Object HttpStatusCodeErrorDetectionStrategy Implements ITransientErrorDetectionStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Http Assembly : MilestoneTG.TransientFaultHandling.Http.dll Syntax public class HttpStatusCodeErrorDetectionStrategy : ITransientErrorDetectionStrategy Remarks Forked from Microsoft.Rest.ClientRuntime. In Microsoft's original implementation, 500-Server Error was considered transient. Unless you're running at Netflix scale and velocity, we have found that it is more likely that a HTTP 500 error will not be retry-able within the scope of a retry policy. We recommend HTTP 500 errors be handled with a circuit breaker. Constructors | Improve this Doc View Source HttpStatusCodeErrorDetectionStrategy() Initializes a new instance of the HttpStatusCodeErrorDetectionStrategy class. Declaration public HttpStatusCodeErrorDetectionStrategy() | Improve this Doc View Source HttpStatusCodeErrorDetectionStrategy(HttpRetryPolicyOptions) Initializes a new instance of the HttpStatusCodeErrorDetectionStrategy class using the supplied options. Declaration public HttpStatusCodeErrorDetectionStrategy(HttpRetryPolicyOptions options) Parameters Type Name Description HttpRetryPolicyOptions options The options. | Improve this Doc View Source HttpStatusCodeErrorDetectionStrategy(Boolean, Boolean) Initializes a new instance of the HttpStatusCodeErrorDetectionStrategy class. Declaration public HttpStatusCodeErrorDetectionStrategy(bool includeTimeouts, bool includeServerError) Parameters Type Name Description System.Boolean includeTimeouts if set to true , request timeouts and gateway timeouts will be considered transient. Default true. System.Boolean includeServerError if set to true , HTTP 500-Internal Server Error will be considered transient. Default false. Methods | Improve this Doc View Source IsTransient(Exception) Returns true if there is a network connection failure, interruption, or status code in HttpRequestExceptionWithStatus exception is 408-Request Timeout, 502-Bad Gateway, 503-Service Unavailable, or 504-Gateway Timeout. Declaration public bool IsTransient(Exception ex) Parameters Type Name Description System.Exception ex Exception to check against. Returns Type Description System.Boolean True if exception is transient otherwise false. Implements ITransientErrorDetectionStrategy"
  },
  "api/MilestoneTG.TransientFaultHandling.FixedIntervalRetryStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.FixedIntervalRetryStrategy.html",
    "title": "Class FixedIntervalRetryStrategy | Transient Fault Handling",
    "keywords": "Class FixedIntervalRetryStrategy Represents a retry strategy with a specified number of retry attempts and a default, fixed time interval between retries. Inheritance System.Object RetryStrategy FixedIntervalRetryStrategy Inherited Members RetryStrategy.DefaultClientRetryCount RetryStrategy.DefaultRetryInterval RetryStrategy.DefaultFirstFastRetry RetryStrategy.NoRetry RetryStrategy.FastFirstRetry RetryStrategy.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public class FixedIntervalRetryStrategy : RetryStrategy Constructors | Improve this Doc View Source FixedIntervalRetryStrategy() Initializes a new instance of the FixedIntervalRetryStrategy class. Declaration public FixedIntervalRetryStrategy() | Improve this Doc View Source FixedIntervalRetryStrategy(Int32) Initializes a new instance of the FixedIntervalRetryStrategy class with the specified number of retry attempts. Declaration public FixedIntervalRetryStrategy(int retryCount) Parameters Type Name Description System.Int32 retryCount The number of retry attempts. | Improve this Doc View Source FixedIntervalRetryStrategy(Int32, TimeSpan) Initializes a new instance of the FixedIntervalRetryStrategy class with the specified number of retry attempts and time interval. Declaration public FixedIntervalRetryStrategy(int retryCount, TimeSpan retryInterval) Parameters Type Name Description System.Int32 retryCount The number of retry attempts. System.TimeSpan retryInterval The time interval between retries. | Improve this Doc View Source FixedIntervalRetryStrategy(String, Int32, TimeSpan) Initializes a new instance of the FixedIntervalRetryStrategy class with the specified number of retry attempts, time interval, and retry strategy. Declaration public FixedIntervalRetryStrategy(string name, int retryCount, TimeSpan retryInterval) Parameters Type Name Description System.String name The retry strategy name. System.Int32 retryCount The number of retry attempts. System.TimeSpan retryInterval The time interval between retries. | Improve this Doc View Source FixedIntervalRetryStrategy(String, Int32, TimeSpan, Boolean) Initializes a new instance of the FixedIntervalRetryStrategy class with the specified number of retry attempts, time interval, retry strategy, and fast start option. Declaration public FixedIntervalRetryStrategy(string name, int retryCount, TimeSpan retryInterval, bool firstFastRetry) Parameters Type Name Description System.String name The retry strategy name. System.Int32 retryCount The number of retry attempts. System.TimeSpan retryInterval The time interval between retries. System.Boolean firstFastRetry true to immediately retry in the first attempt; otherwise, false. The subsequent retries will remain subject to the configured retry interval. Methods | Improve this Doc View Source GetShouldRetryHandler() Returns the corresponding ShouldRetry delegate. Declaration public override ShouldRetryHandler GetShouldRetryHandler() Returns Type Description ShouldRetryHandler The ShouldRetry delegate. Overrides RetryStrategy.GetShouldRetryHandler()"
  },
  "api/MilestoneTG.TransientFaultHandling.ExponentialBackoffRetryStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.ExponentialBackoffRetryStrategy.html",
    "title": "Class ExponentialBackoffRetryStrategy | Transient Fault Handling",
    "keywords": "Class ExponentialBackoffRetryStrategy A retry strategy with backoff parameters for calculating the exponential delay between retries. Inheritance System.Object RetryStrategy ExponentialBackoffRetryStrategy Inherited Members RetryStrategy.DefaultClientRetryCount RetryStrategy.DefaultRetryInterval RetryStrategy.DefaultFirstFastRetry RetryStrategy.NoRetry RetryStrategy.FastFirstRetry RetryStrategy.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public class ExponentialBackoffRetryStrategy : RetryStrategy Constructors | Improve this Doc View Source ExponentialBackoffRetryStrategy() Initializes a new instance of the ExponentialBackoffRetryStrategy class. Declaration public ExponentialBackoffRetryStrategy() | Improve this Doc View Source ExponentialBackoffRetryStrategy(Int32, TimeSpan, TimeSpan, TimeSpan) Initializes a new instance of the ExponentialBackoffRetryStrategy class with the specified retry settings. Declaration public ExponentialBackoffRetryStrategy(int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff) Parameters Type Name Description System.Int32 retryCount The maximum number of retry attempts. System.TimeSpan minBackoff The minimum backoff time System.TimeSpan maxBackoff The maximum backoff time. System.TimeSpan deltaBackoff The value that will be used to calculate a random delta in the exponential delay between retries. | Improve this Doc View Source ExponentialBackoffRetryStrategy(String, Int32, TimeSpan, TimeSpan, TimeSpan) Initializes a new instance of the ExponentialBackoffRetryStrategy class with the specified name and retry settings. Declaration public ExponentialBackoffRetryStrategy(string name, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff) Parameters Type Name Description System.String name The name of the retry strategy. System.Int32 retryCount The maximum number of retry attempts. System.TimeSpan minBackoff The minimum backoff time System.TimeSpan maxBackoff The maximum backoff time. System.TimeSpan deltaBackoff The value that will be used to calculate a random delta in the exponential delay between retries. | Improve this Doc View Source ExponentialBackoffRetryStrategy(String, Int32, TimeSpan, TimeSpan, TimeSpan, Boolean) Initializes a new instance of the ExponentialBackoffRetryStrategy class with the specified name, retry settings, and fast retry option. Declaration public ExponentialBackoffRetryStrategy(string name, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff, bool firstFastRetry) Parameters Type Name Description System.String name The name of the retry strategy. System.Int32 retryCount The maximum number of retry attempts. System.TimeSpan minBackoff The minimum backoff time System.TimeSpan maxBackoff The maximum backoff time. System.TimeSpan deltaBackoff The value that will be used to calculate a random delta in the exponential delay between retries. System.Boolean firstFastRetry true to immediately retry in the first attempt; otherwise, false. The subsequent retries will remain subject to the configured retry interval. Fields | Improve this Doc View Source DefaultClientBackoff Represents the default amount of time used when calculating a random delta in the exponential delay between retries. Declaration public static readonly TimeSpan DefaultClientBackoff Field Value Type Description System.TimeSpan | Improve this Doc View Source DefaultMaxBackoff Represents the default maximum amount of time used when calculating the exponential delay between retries. Declaration public static readonly TimeSpan DefaultMaxBackoff Field Value Type Description System.TimeSpan | Improve this Doc View Source DefaultMinBackoff Represents the default minimum amount of time used when calculating the exponential delay between retries. Declaration public static readonly TimeSpan DefaultMinBackoff Field Value Type Description System.TimeSpan Methods | Improve this Doc View Source GetShouldRetryHandler() Returns the corresponding ShouldRetry delegate. Declaration public override ShouldRetryHandler GetShouldRetryHandler() Returns Type Description ShouldRetryHandler The ShouldRetry delegate. Overrides RetryStrategy.GetShouldRetryHandler()"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.html",
    "title": "Namespace MilestoneTG.TransientFaultHandling.Data | Transient Fault Handling",
    "keywords": "Namespace MilestoneTG.TransientFaultHandling.Data Classes DbCommandExtensions DbConnectionExtensions DbConnection Extension methods. NetworkConnectivityErrorDetectionStrategy Implements a strategy that detects network connectivity errors such as \"host not found\". ReliableDbConnection Provides a reliable way of opening connections to, and executing commands against, the SQL Database databases taking potential network unreliability and connection retry requirements into account. Resources A strongly-typed resource class, for looking up localized strings, etc. SqlCommandFactory Provides factory methods for instantiating SQL commands. SqlXmlReader Provides a disposable wrapper for SQL XML data reader, which synchronizes the SQL connection disposal with its own life cycle. TransactionRetryScope Provides support for retry policy-aware transactional scope."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.TransactionRetryScope.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.TransactionRetryScope.html",
    "title": "Class TransactionRetryScope | Transient Fault Handling",
    "keywords": "Class TransactionRetryScope Provides support for retry policy-aware transactional scope. Inheritance System.Object TransactionRetryScope Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data Assembly : MilestoneTG.TransientFaultHandling.Data.dll Syntax public sealed class TransactionRetryScope : IDisposable Constructors | Improve this Doc View Source TransactionRetryScope(RetryPolicy, Action) Initializes a new instance of the TransactionRetryScope class with the specified retry policy. Declaration public TransactionRetryScope(RetryPolicy retryPolicy, Action unitOfWork) Parameters Type Name Description RetryPolicy retryPolicy The retry policy that determines whether to retry the execution of the entire scope if a transient fault is encountered. System.Action unitOfWork A delegate that represents the executable unit of work that will be retried upon failure. | Improve this Doc View Source TransactionRetryScope(Action) Initializes a new instance of the TransactionRetryScope class. Implements no retry policy, but just invokes the unit of work exactly once. Declaration public TransactionRetryScope(Action unitOfWork) Parameters Type Name Description System.Action unitOfWork A delegate that represents the executable unit of work that will be retried upon failure. | Improve this Doc View Source TransactionRetryScope(Transaction, RetryPolicy, Action) Initializes a new instance of the TransactionRetryScope class with the specified retry policy and sets the specified transaction as the ambient transaction, so that transactional work performed inside the scope uses this transaction. Declaration public TransactionRetryScope(Transaction tx, RetryPolicy retryPolicy, Action unitOfWork) Parameters Type Name Description System.Transactions.Transaction tx The transaction to be set as the ambient transaction, so that transactional work performed inside the scope uses this transaction. RetryPolicy retryPolicy The retry policy that determines whether to retry the execution of the entire scope if a transient fault is encountered. System.Action unitOfWork A delegate that represents the executable unit of work that will be retried upon failure. | Improve this Doc View Source TransactionRetryScope(Transaction, Action) Initializes a new instance of the TransactionRetryScope class and sets the specified transaction as the ambient transaction, so that transactional work performed inside the scope uses this transaction. Implements no retry policy, but just invokes the unit of work exactly once. Declaration public TransactionRetryScope(Transaction tx, Action unitOfWork) Parameters Type Name Description System.Transactions.Transaction tx The transaction to be set as the ambient transaction, so that transactional work performed inside the scope uses this transaction. System.Action unitOfWork A delegate that represents the executable unit of work that will be retried upon failure. | Improve this Doc View Source TransactionRetryScope(Transaction, TimeSpan, RetryPolicy, Action) Initializes a new instance of the TransactionRetryScope class with the specified time-out value, and sets the specified transaction as the ambient transaction, so that transactional work performed inside the scope uses this transaction. Uses the specified retry policy. Declaration public TransactionRetryScope(Transaction tx, TimeSpan scopeTimeout, RetryPolicy retryPolicy, Action unitOfWork) Parameters Type Name Description System.Transactions.Transaction tx The transaction to be set as the ambient transaction, so that transactional work performed inside the scope uses this transaction. System.TimeSpan scopeTimeout The TimeSpan after which the transaction scope times out and aborts the transaction. RetryPolicy retryPolicy The retry policy that determines whether to retry the execution of the entire scope if a transient fault is encountered. System.Action unitOfWork A delegate that represents the executable unit of work that will be retried upon failure. | Improve this Doc View Source TransactionRetryScope(Transaction, TimeSpan, Action) Initializes a new instance of the TransactionRetryScope class with the specified time-out value, and sets the specified transaction as the ambient transaction, so that transactional work performed inside the scope uses this transaction. Implements no retry policy, but just invokes the unit of work exactly once. Declaration public TransactionRetryScope(Transaction tx, TimeSpan scopeTimeout, Action unitOfWork) Parameters Type Name Description System.Transactions.Transaction tx The transaction to be set as the ambient transaction, so that transactional work performed inside the scope uses this transaction. System.TimeSpan scopeTimeout The TimeSpan after which the transaction scope times out and aborts the transaction. System.Action unitOfWork A delegate that represents the executable unit of work that will be retried upon failure. | Improve this Doc View Source TransactionRetryScope(TransactionScopeOption, RetryPolicy, Action) Initializes a new instance of the TransactionRetryScope class with the specified requirements and retry policy. Uses the ReadCommitted isolation level by default. Declaration public TransactionRetryScope(TransactionScopeOption scopeOption, RetryPolicy retryPolicy, Action unitOfWork) Parameters Type Name Description System.Transactions.TransactionScopeOption scopeOption One of the enumeration values that specifies the transaction requirements associated with this transaction scope. RetryPolicy retryPolicy The retry policy that determines whether to retry the execution of the entire scope if a transient fault is encountered. System.Action unitOfWork A delegate that represents the executable unit of work that will be retried upon failure. | Improve this Doc View Source TransactionRetryScope(TransactionScopeOption, Action) Initializes a new instance of the TransactionRetryScope class with the specified requirements. Implements no retry policy, but just invokes the unit of work exactly once. Declaration public TransactionRetryScope(TransactionScopeOption scopeOption, Action unitOfWork) Parameters Type Name Description System.Transactions.TransactionScopeOption scopeOption One of the enumeration values that specifies the transaction requirements associated with this transaction scope. System.Action unitOfWork A delegate that represents the executable unit of work that will be retried upon failure. | Improve this Doc View Source TransactionRetryScope(TransactionScopeOption, TimeSpan, RetryPolicy, Action) Initializes a new instance of the TransactionRetryScope class with the specified time-out value, transaction scope options, and retry policy. Uses the ReadCommitted isolation level by default. Declaration public TransactionRetryScope(TransactionScopeOption scopeOption, TimeSpan scopeTimeout, RetryPolicy retryPolicy, Action unitOfWork) Parameters Type Name Description System.Transactions.TransactionScopeOption scopeOption One of the enumeration values that specifies the transaction requirements associated with this transaction scope. System.TimeSpan scopeTimeout The TimeSpan after which the transaction scope times out and aborts the transaction. RetryPolicy retryPolicy The retry policy that determines whether to retry the execution of the entire scope if a transient fault is encountered. System.Action unitOfWork A delegate that represents the executable unit of work that will be retried upon failure. | Improve this Doc View Source TransactionRetryScope(TransactionScopeOption, TimeSpan, Action) Initializes a new instance of the TransactionRetryScope class with the specified time-out value and requirements. Implements no retry policy, but just invokes the unit of work exactly once. Declaration public TransactionRetryScope(TransactionScopeOption scopeOption, TimeSpan scopeTimeout, Action unitOfWork) Parameters Type Name Description System.Transactions.TransactionScopeOption scopeOption One of the enumeration values that specifies the transaction requirements associated with this transaction scope. System.TimeSpan scopeTimeout The TimeSpan after which the transaction scope times out and aborts the transaction. System.Action unitOfWork A delegate that represents the executable unit of work that will be retried upon failure. | Improve this Doc View Source TransactionRetryScope(TransactionScopeOption, TransactionOptions, RetryPolicy, Action) Initializes a new instance of the TransactionRetryScope class with the specified requirements and retry policy. Declaration public TransactionRetryScope(TransactionScopeOption scopeOption, TransactionOptions transactionOptions, RetryPolicy retryPolicy, Action unitOfWork) Parameters Type Name Description System.Transactions.TransactionScopeOption scopeOption One of the enumeration values that specifies the transaction requirements associated with this transaction scope. System.Transactions.TransactionOptions transactionOptions A System.Transactions.TransactionOptions structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the time-out value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted. RetryPolicy retryPolicy The retry policy that determines whether to retry the execution of the entire scope if a transient fault is encountered. System.Action unitOfWork A delegate that represents the executable unit of work that will be retried upon failure. | Improve this Doc View Source TransactionRetryScope(TransactionScopeOption, TransactionOptions, Action) Initializes a new instance of the TransactionRetryScope class with the specified requirements. Implements no retry policy, but just invokes the unit of work exactly once. Declaration public TransactionRetryScope(TransactionScopeOption scopeOption, TransactionOptions transactionOptions, Action unitOfWork) Parameters Type Name Description System.Transactions.TransactionScopeOption scopeOption One of the enumeration values that specifies the transaction requirements associated with this transaction scope. System.Transactions.TransactionOptions transactionOptions A System.Transactions.TransactionOptions structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the time-out value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted. System.Action unitOfWork A delegate that represents the executable unit of work that will be retried upon failure. Properties | Improve this Doc View Source RetryPolicy Gets the policy that determines whether to retry the execution of the entire scope if a transient fault is encountered. Declaration public RetryPolicy RetryPolicy { get; } Property Value Type Description RetryPolicy Methods | Improve this Doc View Source Complete() Indicates that all operations within the scope have been completed successfully. Declaration public void Complete() | Improve this Doc View Source Dispose() Ends the transaction scope. Declaration public void Dispose() | Improve this Doc View Source InvokeUnitOfWork() Executes the underlying unit of work and retries as prescribed by the current retry policy. Declaration public void InvokeUnitOfWork() Implements System.IDisposable"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | Transient Fault Handling",
    "keywords": "Add your introductions here!"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | Transient Fault Handling",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "index.html": {
    "href": "index.html",
    "title": "MilestoneTG Transient Fault Handling Libraries | Transient Fault Handling",
    "keywords": "MilestoneTG Transient Fault Handling Libraries Much of the work in this project is derived from Microsoft's Enterrpise Library Transient Fault Handling Block and Microsoft's RestClientRuntime. Usage Database Operations You can execute a command using the ReliableSqlConnection class... using(var cn = new ReliableSqlConnection(connectionString)) { using(var cmd = new SqlCommand(sql)) { cn.Open(); using(var rdr = cn.ExecuteCommand<IDataReader>(cmd)) { ... } } } ...or you can use the OpenWithRetry() and ExecuteXxxxWithRetry() extension methods, and pass a specific RetryPolicy ... using(var cn = new SqlConnection(connectionString)) { using(var cmd = new SqlCommand(sql, cn)) { cn.OpenWithRetry(connectionRetryPolicy); using(var rdr = cmd.ExecuteReaderWithRetry(commandRetrypolicy)} { ... } } } Using the extension methods allows you to taylor retry policies specific to a particular command. Http Operations var retryHandler = new RetryDelegatingHandler { InnerHandler = new HttpClientHandler() }; var httpClient = new HttpClient(retryHandler); Idempotency Be careful when using retries on operations that change state--ie. database INSERT, UPDATE, DELETE and Http POST, PUT, DELETE. Ensure that the operation is idempotent--the operation will yield the same result regardless of how many times it is performed. Severed connections, espectially in HTTP, can result in the request still completing. Most databases, will rollback a transaction automatically if a connection is broken prior to commit. Entity Framework EF6 and EF Core, provide transient retry out of the box with the SQL Server, Pomelo.EntityFrameworkCore.MySql, Npgsql.EntityFrameworkCore.PostgreSQL, and DevArt providers. MilestoneTG.TransientFaultHandling.Data.* is not needed in these scenarios. HttpClient Packages MilestoneTG.TransientFaultHandling.Http Contains RetryDelegatingHandler and supporting constructs that adds transient retry capability to the HttpClient pipeline. MilestoneTG.TransientFaultHandling.Http.Extensions HttpClientBuilder extensions to support HttpClientFactory. Database Packages Microsoft SQL Server MilestoneTG.TransientFaultHandling.Data.SqlServer Supports transient fault handling for Microsoft SQL Server, including cloud provided solutions such as Azure SQL Database, AWS RDS for SQL Server. MilestoneTG.NHibernate.TransientFaultHandling.SqlServer NHiberate provider for Microsoft SQL Server that leverages reliable connections and commands. MySQL (as of v2.2) MilestoneTG.TransientFaultHandling.Data.MySql Supports transient fault handling for most implementations of MySQL including MySQL, MariaDB, Percona MySQL, Azure Database for MySQL, AWS Aurora MySQL (including Aurora Serverless) and, AWS RDS for MySQL. PostGreSQL (as of v2.2) MilestoneTG.TransientFaultHandling.Data.Postgres Supports transient fault handling for most implementations of PostreSQL including PostgreSQL, EnterpriseDB, Percona PostgreSQL, Azure Database for PostgreSQL, AWS Aurora PostgreSQL, AWS RDS for PostgreSQL, and AWS Red Shift. Oracle (as of v3.0) MilestoneTG.TransientFaultHandling.Data.Oracle Supports transient fault handling for most deployments of Oracle including on premises, Azure, AWS RDS, and Oracle Cloud. Contributing If you wish to contribute to this project, please open an issue first to discuss the desired change/contribution. Bugs and Feedback For bugs, questions and discussions please use the GitHub Issues ."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.ThrottlingMode.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.ThrottlingMode.html",
    "title": "Enum ThrottlingMode | Transient Fault Handling",
    "keywords": "Enum ThrottlingMode Defines the possible throttling modes in SQL Database. Namespace : MilestoneTG.TransientFaultHandling.Data.SqlServer Assembly : MilestoneTG.TransientFaultHandling.Data.SqlServer.dll Syntax public enum ThrottlingMode Fields Name Description NoThrottling Corresponds to the \"No Throttling\" throttling mode, in which all SQL statements can be processed. RejectAll Corresponds to the \"Reject All\" throttling mode, in which all SQL statements are rejected. RejectAllWrites Corresponds to the \"Reject All Writes\" throttling mode, in which SQL statements such as INSERT, UPDATE, DELETE, CREATE, and DROP are rejected. RejectUpdateInsert Corresponds to the \"Reject Update / Insert\" throttling mode, in which SQL statements such as INSERT, UPDATE, CREATE TABLE, and CREATE INDEX are rejected. Unknown Corresponds to an unknown throttling mode whereby throttling mode cannot be determined with certainty."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.SqlServerNetworkConnectivityErrorDetectionStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.SqlServerNetworkConnectivityErrorDetectionStrategy.html",
    "title": "Class SqlServerNetworkConnectivityErrorDetectionStrategy | Transient Fault Handling",
    "keywords": "Class SqlServerNetworkConnectivityErrorDetectionStrategy Implements a strategy that detects network connectivity errors such as \"host not found\". Inheritance System.Object SqlServerNetworkConnectivityErrorDetectionStrategy Implements ITransientErrorDetectionStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.SqlServer Assembly : MilestoneTG.TransientFaultHandling.Data.SqlServer.dll Syntax public class SqlServerNetworkConnectivityErrorDetectionStrategy : ITransientErrorDetectionStrategy Methods | Improve this Doc View Source IsTransient(Exception) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration public bool IsTransient(Exception ex) Parameters Type Name Description System.Exception ex The exception object to be verified. Returns Type Description System.Boolean true if the specified exception is considered as transient; otherwise, false. Implements ITransientErrorDetectionStrategy"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.SqlDatabaseTransientErrorDetectionStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.SqlDatabaseTransientErrorDetectionStrategy.html",
    "title": "Class SqlDatabaseTransientErrorDetectionStrategy | Transient Fault Handling",
    "keywords": "Class SqlDatabaseTransientErrorDetectionStrategy Provides the transient error detection logic for transient faults that are specific to SQL Database. Inheritance System.Object SqlDatabaseTransientErrorDetectionStrategy Implements ITransientErrorDetectionStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.SqlServer Assembly : MilestoneTG.TransientFaultHandling.Data.SqlServer.dll Syntax public sealed class SqlDatabaseTransientErrorDetectionStrategy : ITransientErrorDetectionStrategy Methods | Improve this Doc View Source IsTransient(Exception) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration public bool IsTransient(Exception ex) Parameters Type Name Description System.Exception ex The exception object to be verified. Returns Type Description System.Boolean true if the specified exception is considered as transient; otherwise, false. Implements ITransientErrorDetectionStrategy"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.RetryManagerSqlExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.RetryManagerSqlExtensions.html",
    "title": "Class RetryManagerSqlExtensions | Transient Fault Handling",
    "keywords": "Class RetryManagerSqlExtensions Extends the RetryManager class to use it with the SQL Database retry strategy. Inheritance System.Object RetryManagerSqlExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.SqlServer Assembly : MilestoneTG.TransientFaultHandling.Data.SqlServer.dll Syntax public static class RetryManagerSqlExtensions Fields | Improve this Doc View Source DefaultStrategyCommandTechnologyName The technology name that can be used to get the default SQL command retry strategy. Declaration public const string DefaultStrategyCommandTechnologyName = \"SQL\" Field Value Type Description System.String | Improve this Doc View Source DefaultStrategyConnectionTechnologyName The technology name that can be used to get the default SQL connection retry strategy. Declaration public const string DefaultStrategyConnectionTechnologyName = \"SQLConnection\" Field Value Type Description System.String Methods | Improve this Doc View Source GetDefaultSqlCommandRetryPolicy(RetryManager) Returns the default retry policy dedicated to handling transient conditions with SQL commands. Declaration public static RetryPolicy GetDefaultSqlCommandRetryPolicy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryPolicy The retry policy for SQL commands with the corresponding default strategy (or the default strategy, if no retry strategy assigned to SQL commands was found). | Improve this Doc View Source GetDefaultSqlCommandRetryStrategy(RetryManager) Returns the default retry strategy for SQL commands. Declaration public static RetryStrategy GetDefaultSqlCommandRetryStrategy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryStrategy The default retry strategy for SQL commands (or the default strategy, if no default could be found). | Improve this Doc View Source GetDefaultSqlConnectionRetryPolicy(RetryManager) Returns the default retry policy dedicated to handling transient conditions with SQL connections. Declaration public static RetryPolicy GetDefaultSqlConnectionRetryPolicy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryPolicy The retry policy for SQL connections with the corresponding default strategy (or the default strategy, if no retry strategy for SQL connections was found). | Improve this Doc View Source GetDefaultSqlConnectionRetryStrategy(RetryManager) Returns the default retry strategy for SQL connections. Declaration public static RetryStrategy GetDefaultSqlConnectionRetryStrategy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryStrategy The default retry strategy for SQL connections (or the default strategy, if no default could be found)."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.ReliableSqlConnection.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.ReliableSqlConnection.html",
    "title": "Class ReliableSqlConnection | Transient Fault Handling",
    "keywords": "Class ReliableSqlConnection Implements transient fault handling for Microsoft SQL Server Client connections. Inheritance System.Object ReliableDbConnection ReliableSqlConnection Implements System.Data.IDbConnection System.IDisposable System.ICloneable Inherited Members ReliableDbConnection.ConnectionString ReliableDbConnection.ConnectionRetryPolicy ReliableDbConnection.CommandRetryPolicy ReliableDbConnection.Current ReliableDbConnection.SessionTracingId ReliableDbConnection.ConnectionTimeout ReliableDbConnection.Database ReliableDbConnection.State ReliableDbConnection.Open() ReliableDbConnection.OpenAsync() ReliableDbConnection.Open(RetryPolicy) ReliableDbConnection.OpenAsync(RetryPolicy) ReliableDbConnection.ExecuteCommand<T>(IDbCommand) ReliableDbConnection.ExecuteCommand<T>(IDbCommand, CommandBehavior) ReliableDbConnection.ExecuteCommand<T>(IDbCommand, RetryPolicy) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand, CommandBehavior) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand, RetryPolicy) ReliableDbConnection.ExecuteCommand<T>(IDbCommand, RetryPolicy, CommandBehavior) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand, RetryPolicy, CommandBehavior) ReliableDbConnection.ExecuteCommand(IDbCommand) ReliableDbConnection.ExecuteCommand(IDbCommand, RetryPolicy) ReliableDbConnection.BeginTransaction(IsolationLevel) ReliableDbConnection.BeginTransaction() ReliableDbConnection.ChangeDatabase(String) ReliableDbConnection.IDbConnection.Open() ReliableDbConnection.Close() ReliableDbConnection.CreateCommand() ReliableDbConnection.IDbConnection.CreateCommand() ReliableDbConnection.ICloneable.Clone() ReliableDbConnection.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.SqlServer Assembly : MilestoneTG.TransientFaultHandling.Data.SqlServer.dll Syntax public class ReliableSqlConnection : ReliableDbConnection, IDbConnection, IDisposable, ICloneable Constructors | Improve this Doc View Source ReliableSqlConnection(String) Initializes a new instance of the ReliableSqlConnection class. Declaration public ReliableSqlConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection string. | Improve this Doc View Source ReliableSqlConnection(String, RetryPolicy) Initializes a new instance of the ReliableSqlConnection class. Declaration public ReliableSqlConnection(string connectionString, RetryPolicy retryPolicy) Parameters Type Name Description System.String connectionString The connection string. RetryPolicy retryPolicy The retry policy. | Improve this Doc View Source ReliableSqlConnection(String, RetryPolicy, RetryPolicy) Initializes a new instance of the ReliableSqlConnection class. Declaration public ReliableSqlConnection(string connectionString, RetryPolicy connectionRetryPolicy, RetryPolicy commandRetryPolicy) Parameters Type Name Description System.String connectionString The connection string used to open the SQL Database. RetryPolicy connectionRetryPolicy The retry policy that defines whether to retry a request if a connection fails to be established. RetryPolicy commandRetryPolicy The retry policy that defines whether to retry a request if a command fails to be executed. Methods | Improve this Doc View Source Clone() Clones this instance. Declaration protected override ReliableDbConnection Clone() Returns Type Description ReliableDbConnection ReliableDbConnection. Overrides ReliableDbConnection.Clone() | Improve this Doc View Source CreateConnection(String) Creates the connection. Declaration protected override DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection string. Returns Type Description System.Data.Common.DbConnection DbConnection. Overrides ReliableDbConnection.CreateConnection(String) | Improve this Doc View Source CreateConnectionStringFailoverPolicy() Creates the connection string failover policy. Declaration protected override RetryPolicy CreateConnectionStringFailoverPolicy() Returns Type Description RetryPolicy RetryPolicy. Overrides ReliableDbConnection.CreateConnectionStringFailoverPolicy() | Improve this Doc View Source ExecuteXmlReader<T>(IDbCommand, CommandBehavior, Boolean) Executes the XML reader. Declaration protected override T ExecuteXmlReader<T>(IDbCommand command, CommandBehavior behavior, bool closeOpenedConnectionOnSuccess) Parameters Type Name Description System.Data.IDbCommand command The command. System.Data.CommandBehavior behavior The behavior. System.Boolean closeOpenedConnectionOnSuccess if set to true [close opened connection on success]. Returns Type Description T T. Type Parameters Name Description T Overrides ReliableDbConnection.ExecuteXmlReader<T>(IDbCommand, CommandBehavior, Boolean) Exceptions Type Condition System.NotSupportedException | Improve this Doc View Source ExecuteXmlReaderAsync<T>(IDbCommand, CommandBehavior, Boolean) Execute XML reader as an asynchronous operation. Declaration protected override Task<T> ExecuteXmlReaderAsync<T>(IDbCommand command, CommandBehavior behavior, bool closeOpenedConnectionOnSuccess) Parameters Type Name Description System.Data.IDbCommand command The command. System.Data.CommandBehavior behavior The behavior. System.Boolean closeOpenedConnectionOnSuccess if set to true [close opened connection on success]. Returns Type Description System.Threading.Tasks.Task <T> T. Type Parameters Name Description T Overrides ReliableDbConnection.ExecuteXmlReaderAsync<T>(IDbCommand, CommandBehavior, Boolean) Exceptions Type Condition System.NotSupportedException Implements System.Data.IDbConnection System.IDisposable System.ICloneable See Also ReliableDbConnection"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.ReliableDbConnection.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.ReliableDbConnection.html",
    "title": "Class ReliableDbConnection | Transient Fault Handling",
    "keywords": "Class ReliableDbConnection Provides a reliable way of opening connections to, and executing commands against, the SQL Database databases taking potential network unreliability and connection retry requirements into account. Inheritance System.Object ReliableDbConnection ReliableMySqlConnection ReliableOracleConnection ReliableNpgsqlConnection ReliableSqlConnection Implements System.Data.IDbConnection System.IDisposable System.ICloneable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data Assembly : MilestoneTG.TransientFaultHandling.Data.dll Syntax public abstract class ReliableDbConnection : IDbConnection, IDisposable, ICloneable Constructors | Improve this Doc View Source ReliableDbConnection(String, RetryPolicy, RetryPolicy) Initializes a new instance of the ReliableDbConnection class with the specified connection string and a policy that defines whether to retry a request if a connection or command fails. Declaration public ReliableDbConnection(string connectionString, RetryPolicy connectionRetryPolicy, RetryPolicy commandRetryPolicy) Parameters Type Name Description System.String connectionString The connection string used to open the SQL Database. RetryPolicy connectionRetryPolicy The retry policy that defines whether to retry a request if a connection fails to be established. RetryPolicy commandRetryPolicy The retry policy that defines whether to retry a request if a command fails to be executed. Properties | Improve this Doc View Source CommandRetryPolicy Gets the policy that determines whether to retry a command, based on how many times the request has been made and the reason for the last failure. Declaration public RetryPolicy CommandRetryPolicy { get; } Property Value Type Description RetryPolicy | Improve this Doc View Source ConnectionRetryPolicy Gets the policy that determines whether to retry a connection request, based on how many times the request has been made and the reason for the last failure. Declaration public RetryPolicy ConnectionRetryPolicy { get; } Property Value Type Description RetryPolicy | Improve this Doc View Source ConnectionString Gets or sets the connection string for opening a connection to the SQL Database. Declaration public string ConnectionString { get; set; } Property Value Type Description System.String | Improve this Doc View Source ConnectionTimeout Gets a value that specifies the time to wait while trying to establish a connection before terminating the attempt and generating an error. Declaration public int ConnectionTimeout { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Current Gets an instance of the SqlConnection object that represents the connection to a SQL Database instance. Declaration public DbConnection Current { get; } Property Value Type Description System.Data.Common.DbConnection | Improve this Doc View Source Database Gets the name of the current database or the database to be used after a connection is opened. Declaration public string Database { get; } Property Value Type Description System.String | Improve this Doc View Source SessionTracingId Gets the CONTEXT_INFO value that was set for the current session. This value can be used to trace query execution problems. Declaration public Guid SessionTracingId { get; } Property Value Type Description System.Guid | Improve this Doc View Source State Gets the current state of the connection. Declaration public ConnectionState State { get; } Property Value Type Description System.Data.ConnectionState Methods | Improve this Doc View Source BeginTransaction() Begins a database transaction. Declaration public IDbTransaction BeginTransaction() Returns Type Description System.Data.IDbTransaction An object that represents the new transaction. | Improve this Doc View Source BeginTransaction(IsolationLevel) Begins a database transaction with the specified System.Data.IsolationLevel value. Declaration public IDbTransaction BeginTransaction(IsolationLevel il) Parameters Type Name Description System.Data.IsolationLevel il One of the enumeration values that specifies the isolation level for the transaction. Returns Type Description System.Data.IDbTransaction An object that represents the new transaction. | Improve this Doc View Source ChangeDatabase(String) Changes the current database for an open Connection object. Declaration public void ChangeDatabase(string databaseName) Parameters Type Name Description System.String databaseName The name of the database to use in place of the current database. | Improve this Doc View Source Clone() Clones this instance. Declaration protected abstract ReliableDbConnection Clone() Returns Type Description ReliableDbConnection ReliableDbConnection. | Improve this Doc View Source Close() Closes the connection to the database. Declaration public void Close() | Improve this Doc View Source CreateCommand() Creates and returns a SqlCommand object that is associated with the underlying SqlConnection. Declaration public DbCommand CreateCommand() Returns Type Description System.Data.Common.DbCommand A System.Data.SqlClient.SqlCommand object that is associated with the underlying connection. | Improve this Doc View Source CreateConnection(String) Creates the connection. Declaration protected abstract DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection string. Returns Type Description System.Data.Common.DbConnection DbConnection. | Improve this Doc View Source CreateConnectionStringFailoverPolicy() Creates the connection string failover policy. Declaration protected abstract RetryPolicy CreateConnectionStringFailoverPolicy() Returns Type Description RetryPolicy RetryPolicy. | Improve this Doc View Source Dispose() Performs application-defined tasks that are associated with freeing, releasing, or resetting managed and unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source ExecuteCommand(IDbCommand) Executes a SQL command and returns the number of rows affected. Declaration public int ExecuteCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The SQL command to be executed. Returns Type Description System.Int32 The number of rows affected. | Improve this Doc View Source ExecuteCommand(IDbCommand, RetryPolicy) Executes a SQL command and returns the number of rows affected. Declaration public int ExecuteCommand(IDbCommand command, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.IDbCommand command The SQL command to be executed. RetryPolicy retryPolicy The retry policy that defines whether to retry a command if a connection fails while executing the command. Returns Type Description System.Int32 The number of rows affected. | Improve this Doc View Source ExecuteCommand<T>(IDbCommand) Executes a SQL command and returns a result that is defined by the specified type T . This method uses the retry policy specified when instantiating the SqlAzureConnection class (or the default retry policy if no policy was set at construction time). Declaration public T ExecuteCommand<T>(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The SQL command to be executed. Returns Type Description T An instance of an IDataReader, XmlReader, or any other .NET Framework object that contains the result. Type Parameters Name Description T IDataReader, XmlReader, or any other .NET Framework type that defines the type of result to be returned. | Improve this Doc View Source ExecuteCommand<T>(IDbCommand, RetryPolicy) Executes a SQL command by using the specified retry policy, and returns a result that is defined by the specified type T Declaration public T ExecuteCommand<T>(IDbCommand command, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.IDbCommand command The SQL command to be executed. RetryPolicy retryPolicy The retry policy that defines whether to retry a command if a connection fails while executing the command. Returns Type Description T An instance of an IDataReader, XmlReader, or any other .NET Frameork object that contains the result. Type Parameters Name Description T IDataReader, XmlReader, or any other .NET Framework type that defines the type of result to be returned. | Improve this Doc View Source ExecuteCommand<T>(IDbCommand, RetryPolicy, CommandBehavior) Executes a SQL command by using the specified retry policy, and returns a result that is defined by the specified type T Declaration public T ExecuteCommand<T>(IDbCommand command, RetryPolicy retryPolicy, CommandBehavior behavior) Parameters Type Name Description System.Data.IDbCommand command The SQL command to be executed. RetryPolicy retryPolicy The retry policy that defines whether to retry a command if a connection fails while executing the command. System.Data.CommandBehavior behavior A description of the results of the query and its effect on the database. Returns Type Description T An instance of an IDataReader, XmlReader, or any other .NET Frameork object that contains the result. Type Parameters Name Description T IDataReader, XmlReader, or any other .NET Framework type that defines the type of result to be returned. | Improve this Doc View Source ExecuteCommand<T>(IDbCommand, CommandBehavior) Executes a SQL command and returns a result that is defined by the specified type T . This method uses the retry policy specified when instantiating the SqlAzureConnection class (or the default retry policy if no policy was set at construction time). Declaration public T ExecuteCommand<T>(IDbCommand command, CommandBehavior behavior) Parameters Type Name Description System.Data.IDbCommand command The SQL command to be executed. System.Data.CommandBehavior behavior A description of the results of the query and its effect on the database. Returns Type Description T An instance of an IDataReader, XmlReader, or any other .NET Frameork object that contains the result. Type Parameters Name Description T IDataReader, XmlReader, or any other .NET Framework type that defines the type of result to be returned. | Improve this Doc View Source ExecuteCommandAsync<T>(DbCommand) Executes a SQL command and returns a result that is defined by the specified type T . This method uses the retry policy specified when instantiating the SqlAzureConnection class (or the default retry policy if no policy was set at construction time). Declaration public Task<T> ExecuteCommandAsync<T>(DbCommand command) Parameters Type Name Description System.Data.Common.DbCommand command The SQL command to be executed. Returns Type Description System.Threading.Tasks.Task <T> An instance of an IDataReader, XmlReader, or any other .NET Framework object that contains the result. Type Parameters Name Description T IDataReader, XmlReader, or any other .NET Framework type that defines the type of result to be returned. | Improve this Doc View Source ExecuteCommandAsync<T>(DbCommand, RetryPolicy) Executes a SQL command by using the specified retry policy, and returns a result that is defined by the specified type T Declaration public Task<T> ExecuteCommandAsync<T>(DbCommand command, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.Common.DbCommand command The SQL command to be executed. RetryPolicy retryPolicy The retry policy that defines whether to retry a command if a connection fails while executing the command. Returns Type Description System.Threading.Tasks.Task <T> An instance of an IDataReader, XmlReader, or any other .NET Frameork object that contains the result. Type Parameters Name Description T IDataReader, XmlReader, or any other .NET Framework type that defines the type of result to be returned. | Improve this Doc View Source ExecuteCommandAsync<T>(DbCommand, RetryPolicy, CommandBehavior) Executes a SQL command by using the specified retry policy, and returns a result that is defined by the specified type T Declaration public Task<T> ExecuteCommandAsync<T>(DbCommand command, RetryPolicy retryPolicy, CommandBehavior behavior) Parameters Type Name Description System.Data.Common.DbCommand command The SQL command to be executed. RetryPolicy retryPolicy The retry policy that defines whether to retry a command if a connection fails while executing the command. System.Data.CommandBehavior behavior A description of the results of the query and its effect on the database. Returns Type Description System.Threading.Tasks.Task <T> An instance of an IDataReader, XmlReader, or any other .NET Frameork object that contains the result. Type Parameters Name Description T IDataReader, XmlReader, or any other .NET Framework type that defines the type of result to be returned. | Improve this Doc View Source ExecuteCommandAsync<T>(DbCommand, CommandBehavior) Executes a SQL command and returns a result that is defined by the specified type T . This method uses the retry policy specified when instantiating the SqlAzureConnection class (or the default retry policy if no policy was set at construction time). Declaration public Task<T> ExecuteCommandAsync<T>(DbCommand command, CommandBehavior behavior) Parameters Type Name Description System.Data.Common.DbCommand command The SQL command to be executed. System.Data.CommandBehavior behavior A description of the results of the query and its effect on the database. Returns Type Description System.Threading.Tasks.Task <T> An instance of an IDataReader, XmlReader, or any other .NET Frameork object that contains the result. Type Parameters Name Description T IDataReader, XmlReader, or any other .NET Framework type that defines the type of result to be returned. | Improve this Doc View Source ExecuteXmlReader<T>(IDbCommand, CommandBehavior, Boolean) Executes the XML reader. Declaration protected virtual T ExecuteXmlReader<T>(IDbCommand command, CommandBehavior behavior, bool closeOpenedConnectionOnSuccess) Parameters Type Name Description System.Data.IDbCommand command The command. System.Data.CommandBehavior behavior The behavior. System.Boolean closeOpenedConnectionOnSuccess if set to true [close opened connection on success]. Returns Type Description T T. Type Parameters Name Description T | Improve this Doc View Source ExecuteXmlReaderAsync<T>(IDbCommand, CommandBehavior, Boolean) Executes the XML reader. Declaration protected virtual Task<T> ExecuteXmlReaderAsync<T>(IDbCommand command, CommandBehavior behavior, bool closeOpenedConnectionOnSuccess) Parameters Type Name Description System.Data.IDbCommand command The command. System.Data.CommandBehavior behavior The behavior. System.Boolean closeOpenedConnectionOnSuccess if set to true [close opened connection on success]. Returns Type Description System.Threading.Tasks.Task <T> T. Type Parameters Name Description T | Improve this Doc View Source Open() Opens a database connection with the settings specified by the ConnectionString and ConnectionRetryPolicy properties. Declaration public DbConnection Open() Returns Type Description System.Data.Common.DbConnection An object that represents the open connection. | Improve this Doc View Source Open(RetryPolicy) Opens a database connection with the settings specified by the connection string and the specified retry policy. Declaration public DbConnection Open(RetryPolicy retryPolicy) Parameters Type Name Description RetryPolicy retryPolicy The retry policy that defines whether to retry a request if the connection fails to open. Returns Type Description System.Data.Common.DbConnection An object that represents the open connection. | Improve this Doc View Source OpenAsync() Opens a database connection with the settings specified by the ConnectionString and ConnectionRetryPolicy properties. Declaration public Task<DbConnection> OpenAsync() Returns Type Description System.Threading.Tasks.Task < System.Data.Common.DbConnection > An object that represents the open connection. | Improve this Doc View Source OpenAsync(RetryPolicy) Opens a database connection with the settings specified by the connection string and the specified retry policy. Declaration public Task<DbConnection> OpenAsync(RetryPolicy retryPolicy) Parameters Type Name Description RetryPolicy retryPolicy The retry policy that defines whether to retry a request if the connection fails to open. Returns Type Description System.Threading.Tasks.Task < System.Data.Common.DbConnection > An object that represents the open connection. Explicit Interface Implementations | Improve this Doc View Source IDbConnection.CreateCommand() Creates and returns an object that implements the IDbCommand interface that is associated with the underlying SqlConnection. Declaration IDbCommand IDbConnection.CreateCommand() Returns Type Description System.Data.IDbCommand A System.Data.SqlClient.SqlCommand object that is associated with the underlying connection. | Improve this Doc View Source IDbConnection.Open() Opens a database connection with the settings specified by the ConnectionString property of the provider-specific Connection object. Declaration void IDbConnection.Open() | Improve this Doc View Source ICloneable.Clone() Creates a new connection that is a copy of the current instance, including the connection string, connection retry policy, and command retry policy. Declaration object ICloneable.Clone() Returns Type Description System.Object A new object that is a copy of this instance. Implements System.Data.IDbConnection System.IDisposable System.ICloneable"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Postgres.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Postgres.html",
    "title": "Namespace MilestoneTG.TransientFaultHandling.Data.Postgres | Transient Fault Handling",
    "keywords": "Namespace MilestoneTG.TransientFaultHandling.Data.Postgres Classes NpgsqlCommandExtensions Provides a set of extension methods that add retry capabilities to the standard System.Data.SqlClient.SqlCommand implementation. NpgsqlConnectionExtensions Provides a set of extension methods that add retry capabilities to the standard implementation. PostgreSqlDatabaseTransientErrorDetectionStrategy Provides the transient error detection logic for transient faults that are specific to SQL Database. ReliableNpgsqlConnection RetryManagerNpgsqlExtensions Extends the RetryManager class to use it with the Npgsql Database retry strategy."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Postgres.PostgreSqlDatabaseTransientErrorDetectionStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Postgres.PostgreSqlDatabaseTransientErrorDetectionStrategy.html",
    "title": "Class PostgreSqlDatabaseTransientErrorDetectionStrategy | Transient Fault Handling",
    "keywords": "Class PostgreSqlDatabaseTransientErrorDetectionStrategy Provides the transient error detection logic for transient faults that are specific to SQL Database. Inheritance System.Object PostgreSqlDatabaseTransientErrorDetectionStrategy Implements ITransientErrorDetectionStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.Postgres Assembly : MilestoneTG.TransientFaultHandling.Data.Postgres.dll Syntax public sealed class PostgreSqlDatabaseTransientErrorDetectionStrategy : ITransientErrorDetectionStrategy Methods | Improve this Doc View Source IsTransient(Exception) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration public bool IsTransient(Exception ex) Parameters Type Name Description System.Exception ex The exception object to be verified. Returns Type Description System.Boolean true if the specified exception is considered as transient; otherwise, false. Implements ITransientErrorDetectionStrategy"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Postgres.NpgsqlConnectionExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Postgres.NpgsqlConnectionExtensions.html",
    "title": "Class NpgsqlConnectionExtensions | Transient Fault Handling",
    "keywords": "Class NpgsqlConnectionExtensions Provides a set of extension methods that add retry capabilities to the standard implementation. Inheritance System.Object NpgsqlConnectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.Postgres Assembly : MilestoneTG.TransientFaultHandling.Data.Postgres.dll Syntax public static class NpgsqlConnectionExtensions Methods | Improve this Doc View Source OpenWithRetry(NpgsqlConnection) Opens a database connection with the connection settings specified in the ConnectionString property of the connection object. Uses the default retry policy when opening the connection. Declaration public static void OpenWithRetry(this NpgsqlConnection connection) Parameters Type Name Description Npgsql.NpgsqlConnection connection The connection object that is required for the extension method declaration. | Improve this Doc View Source OpenWithRetryAsync(NpgsqlConnection) Opens a database connection with the connection settings specified in the ConnectionString property of the connection object. Uses the default retry policy when opening the connection. Declaration public static Task OpenWithRetryAsync(this NpgsqlConnection connection) Parameters Type Name Description Npgsql.NpgsqlConnection connection The connection object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Oracle.RetryManagerOracleExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Oracle.RetryManagerOracleExtensions.html",
    "title": "Class RetryManagerOracleExtensions | Transient Fault Handling",
    "keywords": "Class RetryManagerOracleExtensions Extends the RetryManager class to use it with the Oracle Database retry strategy. Inheritance System.Object RetryManagerOracleExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data.Oracle Assembly : MilestoneTG.TransientFaultHandling.Data.Oracle.dll Syntax public static class RetryManagerOracleExtensions Fields | Improve this Doc View Source DefaultStrategyCommandTechnologyName The technology name that can be used to get the default Oracle command retry strategy. Declaration public const string DefaultStrategyCommandTechnologyName = \"Oracle\" Field Value Type Description System.String | Improve this Doc View Source DefaultStrategyConnectionTechnologyName The technology name that can be used to get the default Oracle connection retry strategy. Declaration public const string DefaultStrategyConnectionTechnologyName = \"OracleConnection\" Field Value Type Description System.String Methods | Improve this Doc View Source GetDefaultOracleCommandRetryPolicy(RetryManager) Returns the default retry policy dedicated to handling transient conditions with Oracle commands. Declaration public static RetryPolicy GetDefaultOracleCommandRetryPolicy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryPolicy The retry policy for Oracle commands with the corresponding default strategy (or the default strategy, if no retry strategy assigned to Oracle commands was found). | Improve this Doc View Source GetDefaultOracleCommandRetryStrategy(RetryManager) Returns the default retry strategy for Oracle commands. Declaration public static RetryStrategy GetDefaultOracleCommandRetryStrategy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryStrategy The default retry strategy for Oracle commands (or the default strategy, if no default could be found). | Improve this Doc View Source GetDefaultOracleConnectionRetryPolicy(RetryManager) Returns the default retry policy dedicated to handling transient conditions with Oracle connections. Declaration public static RetryPolicy GetDefaultOracleConnectionRetryPolicy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryPolicy The retry policy for Oracle connections with the corresponding default strategy (or the default strategy, if no retry strategy for Oracle connections was found). | Improve this Doc View Source GetDefaultOracleConnectionRetryStrategy(RetryManager) Returns the default retry strategy for Oracle connections. Declaration public static RetryStrategy GetDefaultOracleConnectionRetryStrategy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryStrategy The default retry strategy for Oracle connections (or the default strategy, if no default could be found)."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Oracle.ReliableOracleConnection.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Oracle.ReliableOracleConnection.html",
    "title": "Class ReliableOracleConnection | Transient Fault Handling",
    "keywords": "Class ReliableOracleConnection Inheritance System.Object ReliableDbConnection ReliableOracleConnection Implements System.Data.IDbConnection System.IDisposable System.ICloneable Inherited Members ReliableDbConnection.ConnectionString ReliableDbConnection.ConnectionRetryPolicy ReliableDbConnection.CommandRetryPolicy ReliableDbConnection.Current ReliableDbConnection.SessionTracingId ReliableDbConnection.ConnectionTimeout ReliableDbConnection.Database ReliableDbConnection.State ReliableDbConnection.Open() ReliableDbConnection.OpenAsync() ReliableDbConnection.Open(RetryPolicy) ReliableDbConnection.OpenAsync(RetryPolicy) ReliableDbConnection.ExecuteCommand<T>(IDbCommand) ReliableDbConnection.ExecuteCommand<T>(IDbCommand, CommandBehavior) ReliableDbConnection.ExecuteCommand<T>(IDbCommand, RetryPolicy) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand, CommandBehavior) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand, RetryPolicy) ReliableDbConnection.ExecuteCommand<T>(IDbCommand, RetryPolicy, CommandBehavior) ReliableDbConnection.ExecuteCommandAsync<T>(DbCommand, RetryPolicy, CommandBehavior) ReliableDbConnection.ExecuteXmlReader<T>(IDbCommand, CommandBehavior, Boolean) ReliableDbConnection.ExecuteXmlReaderAsync<T>(IDbCommand, CommandBehavior, Boolean) ReliableDbConnection.ExecuteCommand(IDbCommand) ReliableDbConnection.ExecuteCommand(IDbCommand, RetryPolicy) ReliableDbConnection.BeginTransaction(IsolationLevel) ReliableDbConnection.BeginTransaction() ReliableDbConnection.ChangeDatabase(String) ReliableDbConnection.IDbConnection.Open() ReliableDbConnection.Close() ReliableDbConnection.CreateCommand() ReliableDbConnection.IDbConnection.CreateCommand() ReliableDbConnection.ICloneable.Clone() ReliableDbConnection.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data.Oracle Assembly : MilestoneTG.TransientFaultHandling.Data.Oracle.dll Syntax public class ReliableOracleConnection : ReliableDbConnection, IDbConnection, IDisposable, ICloneable Constructors | Improve this Doc View Source ReliableOracleConnection(String) Initializes a new instance of the ReliableOracleConnection class. Declaration public ReliableOracleConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection string. | Improve this Doc View Source ReliableOracleConnection(String, RetryPolicy) Initializes a new instance of the ReliableOracleConnection class. Declaration public ReliableOracleConnection(string connectionString, RetryPolicy retryPolicy) Parameters Type Name Description System.String connectionString The connection string. RetryPolicy retryPolicy The retry policy. | Improve this Doc View Source ReliableOracleConnection(String, RetryPolicy, RetryPolicy) Initializes a new instance of the ReliableOracleConnection class. Declaration public ReliableOracleConnection(string connectionString, RetryPolicy connectionRetryPolicy, RetryPolicy commandRetryPolicy) Parameters Type Name Description System.String connectionString The connection string used to open the Oracle Database. RetryPolicy connectionRetryPolicy The retry policy that defines whether to retry a request if a connection fails to be established. RetryPolicy commandRetryPolicy The retry policy that defines whether to retry a request if a command fails to be executed. Methods | Improve this Doc View Source Clone() Clones this instance. Declaration protected override ReliableDbConnection Clone() Returns Type Description ReliableDbConnection ReliableDbConnection. Overrides ReliableDbConnection.Clone() | Improve this Doc View Source CreateConnection(String) Creates the connection. Declaration protected override DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection string. Returns Type Description System.Data.Common.DbConnection DbConnection. Overrides ReliableDbConnection.CreateConnection(String) | Improve this Doc View Source CreateConnectionStringFailoverPolicy() Creates the connection string failover policy. Declaration protected override RetryPolicy CreateConnectionStringFailoverPolicy() Returns Type Description RetryPolicy RetryPolicy. Overrides ReliableDbConnection.CreateConnectionStringFailoverPolicy() Implements System.Data.IDbConnection System.IDisposable System.ICloneable"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Oracle.OracleCommandExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Oracle.OracleCommandExtensions.html",
    "title": "Class OracleCommandExtensions | Transient Fault Handling",
    "keywords": "Class OracleCommandExtensions Provides a set of extension methods that add retry capabilities to the standard System.Data.SqlClient.SqlCommand implementation. Inheritance System.Object OracleCommandExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data.Oracle Assembly : MilestoneTG.TransientFaultHandling.Data.Oracle.dll Syntax public static class OracleCommandExtensions Methods | Improve this Doc View Source ExecuteNonQueryWithRetry(OracleCommand) Executes a Transact-Oracle statement against the connection and returns the number of rows affected. Uses the default retry policy when executing the command. Declaration public static int ExecuteNonQueryWithRetry(this OracleCommand command) Parameters Type Name Description Oracle.ManagedDataAccess.Client.OracleCommand command The command object that is required for the extension method declaration. Returns Type Description System.Int32 The number of rows affected. | Improve this Doc View Source ExecuteNonQueryWithRetryAsync(OracleCommand) Executes a Transact-Oracle statement against the connection and returns the number of rows affected. Uses the default retry policy when executing the command. Declaration public static Task<int> ExecuteNonQueryWithRetryAsync(this OracleCommand command) Parameters Type Name Description Oracle.ManagedDataAccess.Client.OracleCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < System.Int32 > The number of rows affected. | Improve this Doc View Source ExecuteReaderWithRetry(OracleCommand) Sends the specified command to the connection and builds a OracleDataReader object that contains the results. Uses the default retry policy when executing the command. Declaration public static OracleDataReader ExecuteReaderWithRetry(this OracleCommand command) Parameters Type Name Description Oracle.ManagedDataAccess.Client.OracleCommand command The command object that is required for the extension method declaration. Returns Type Description Oracle.ManagedDataAccess.Client.OracleDataReader A System.Data.OracleClient.OracleDataReader object. | Improve this Doc View Source ExecuteReaderWithRetry(OracleCommand, CommandBehavior) Sends the specified command to the connection and builds a OracleDataReader object by using the specified command behavior. Uses the default retry policy when executing the command. Declaration public static OracleDataReader ExecuteReaderWithRetry(this OracleCommand command, CommandBehavior behavior) Parameters Type Name Description Oracle.ManagedDataAccess.Client.OracleCommand command The command object that is required for the extension method declaration. System.Data.CommandBehavior behavior One of the enumeration values that specifies the command behavior. Returns Type Description Oracle.ManagedDataAccess.Client.OracleDataReader A System.Data.OracleClient.OracleDataReader object. | Improve this Doc View Source ExecuteReaderWithRetryAsync(OracleCommand) Sends the specified command to the connection and builds a OracleDataReader object that contains the results. Uses the default retry policy when executing the command. Declaration public static Task<OracleDataReader> ExecuteReaderWithRetryAsync(this OracleCommand command) Parameters Type Name Description Oracle.ManagedDataAccess.Client.OracleCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < Oracle.ManagedDataAccess.Client.OracleDataReader > A System.Data.OracleClient.OracleDataReader object. | Improve this Doc View Source ExecuteReaderWithRetryAsync(OracleCommand, CommandBehavior) Sends the specified command to the connection and builds a OracleDataReader object by using the specified command behavior. Uses the default retry policy when executing the command. Declaration public static Task<OracleDataReader> ExecuteReaderWithRetryAsync(this OracleCommand command, CommandBehavior behavior) Parameters Type Name Description Oracle.ManagedDataAccess.Client.OracleCommand command The command object that is required for the extension method declaration. System.Data.CommandBehavior behavior One of the enumeration values that specifies the command behavior. Returns Type Description System.Threading.Tasks.Task < Oracle.ManagedDataAccess.Client.OracleDataReader > A System.Data.OracleClient.OracleDataReader object. | Improve this Doc View Source ExecuteScalarWithRetry(OracleCommand) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Uses the default retry policy when executing the command. Declaration public static object ExecuteScalarWithRetry(this OracleCommand command) Parameters Type Name Description Oracle.ManagedDataAccess.Client.OracleCommand command The command object that is required for the extension method declaration. Returns Type Description System.Object The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters. | Improve this Doc View Source ExecuteScalarWithRetryAsync(OracleCommand) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Uses the default retry policy when executing the command. Declaration public static Task<object> ExecuteScalarWithRetryAsync(this OracleCommand command) Parameters Type Name Description Oracle.ManagedDataAccess.Client.OracleCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < System.Object > The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters."
  },
  "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.ReliableSql2008ClientDriver.html": {
    "href": "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.ReliableSql2008ClientDriver.html",
    "title": "Class ReliableSql2008ClientDriver | Transient Fault Handling",
    "keywords": "Class ReliableSql2008ClientDriver Abstract base class that enables the creation of an NHibernate client driver that extends the Sql 2008 driver, but adds in transient fault handling retry logic via ReliableSqlConnection . Inheritance System.Object NHibernate.Driver.DriverBase NHibernate.Driver.ReflectionBasedDriver NHibernate.Driver.SqlClientDriver NHibernate.Driver.Sql2008ClientDriver ReliableSql2008ClientDriver DefaultReliableSql2008ClientDriver<TTransientErrorDetectionStrategy> Implements NHibernate.Driver.IDriver NHibernate.Driver.ISqlParameterFormatter NHibernate.AdoNet.IEmbeddedBatcherFactoryProvider Inherited Members NHibernate.Driver.Sql2008ClientDriver.InitializeParameter(System.Data.Common.DbParameter, System.String, NHibernate.SqlTypes.SqlType) NHibernate.Driver.Sql2008ClientDriver.RequiresTimeSpanForTime NHibernate.Driver.Sql2008ClientDriver.MinDate NHibernate.Driver.SqlClientDriver.MaxSizeForAnsiClob NHibernate.Driver.SqlClientDriver.MaxSizeForClob NHibernate.Driver.SqlClientDriver.MaxSizeForBlob NHibernate.Driver.SqlClientDriver.MaxSizeForXml NHibernate.Driver.SqlClientDriver.MaxSizeForLengthLimitedAnsiString NHibernate.Driver.SqlClientDriver.MaxSizeForLengthLimitedString NHibernate.Driver.SqlClientDriver.MaxSizeForLengthLimitedBinary NHibernate.Driver.SqlClientDriver.MaxPrecision NHibernate.Driver.SqlClientDriver.MaxScale NHibernate.Driver.SqlClientDriver.MaxDateTime2 NHibernate.Driver.SqlClientDriver.MaxDateTimeOffset NHibernate.Driver.SqlClientDriver.Configure(System.Collections.Generic.IDictionary<System.String, System.String>) NHibernate.Driver.SqlClientDriver.SetVariableLengthParameterSize(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.SetDefaultParameterSize(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.IsAnsiText(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.IsText(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.IsBlob(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.GetResultSetsCommand(NHibernate.Engine.ISessionImplementor) NHibernate.Driver.SqlClientDriver.NHibernate.AdoNet.IEmbeddedBatcherFactoryProvider.BatcherFactoryClass NHibernate.Driver.SqlClientDriver.UseNamedPrefixInSql NHibernate.Driver.SqlClientDriver.UseNamedPrefixInParameter NHibernate.Driver.SqlClientDriver.NamedPrefix NHibernate.Driver.SqlClientDriver.SupportsMultipleOpenReaders NHibernate.Driver.SqlClientDriver.SupportsMultipleQueries NHibernate.Driver.SqlClientDriver.HasDelayedDistributedTransactionCompletion NHibernate.Driver.ReflectionBasedDriver.ReflectionTypedProviderExceptionMessageTemplate NHibernate.Driver.ReflectionBasedDriver.DriverVersion NHibernate.Driver.DriverBase.FormatNameForSql(System.String) NHibernate.Driver.DriverBase.FormatNameForParameter(System.String) NHibernate.Driver.DriverBase.GenerateCommand(System.Data.CommandType, NHibernate.SqlCommand.SqlString, NHibernate.SqlTypes.SqlType[]) NHibernate.Driver.DriverBase.SetCommandTimeout(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.NHibernate.Driver.ISqlParameterFormatter.GetParameterName(System.Int32) NHibernate.Driver.DriverBase.GetSqlStringFormatter() NHibernate.Driver.DriverBase.GenerateParameter(System.Data.Common.DbCommand, System.String, NHibernate.SqlTypes.SqlType) NHibernate.Driver.DriverBase.RemoveUnusedCommandParameters(System.Data.Common.DbCommand, NHibernate.SqlCommand.SqlString) NHibernate.Driver.DriverBase.ExpandQueryParameters(System.Data.Common.DbCommand, NHibernate.SqlCommand.SqlString, NHibernate.SqlTypes.SqlType[]) NHibernate.Driver.DriverBase.CloneParameter(System.Data.Common.DbCommand, System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.DriverBase.PrepareCommand(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.OnBeforePrepare(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.AdjustCommand(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.GenerateOutputParameter(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.IsPrepareSqlEnabled NHibernate.Driver.DriverBase.SupportsPreparingCommands NHibernate.Driver.DriverBase.SupportsSystemTransactions NHibernate.Driver.DriverBase.SupportsNullEnlistment NHibernate.Driver.DriverBase.SupportsEnlistmentWhenAutoEnlistmentIsDisabled System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer Assembly : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.dll Syntax public abstract class ReliableSql2008ClientDriver : Sql2008ClientDriver, IDriver, ISqlParameterFormatter, IEmbeddedBatcherFactoryProvider Methods | Improve this Doc View Source CreateCommand() Creates an uninitialized System.Data.DbCommand object for the SqlClientDriver. Declaration public override DbCommand CreateCommand() Returns Type Description System.Data.Common.DbCommand An uninitialized System.Data.SqlClient.SqlCommand object. Overrides NHibernate.Driver.ReflectionBasedDriver.CreateCommand() | Improve this Doc View Source CreateConnection() Creates an uninitialized System.Data.DbConnection object for the SqlClientDriver. Declaration public override DbConnection CreateConnection() Returns Type Description System.Data.Common.DbConnection An uninitialized System.Data.SqlClient.SqlConnection object. Overrides NHibernate.Driver.ReflectionBasedDriver.CreateConnection() | Improve this Doc View Source CreateReliableConnection() Provides a ReliableSqlConnection instance to use for connections. Declaration protected abstract ReliableSqlConnection CreateReliableConnection() Returns Type Description ReliableSqlConnection A reliable connection Implements NHibernate.Driver.IDriver NHibernate.Driver.ISqlParameterFormatter NHibernate.AdoNet.IEmbeddedBatcherFactoryProvider"
  },
  "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.ReliableAdoNetTransactionFactory.html": {
    "href": "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.ReliableAdoNetTransactionFactory.html",
    "title": "Class ReliableAdoNetTransactionFactory | Transient Fault Handling",
    "keywords": "Class ReliableAdoNetTransactionFactory An NHibernate transaction factory that provides retry logic for transient errors when executing transactions. Inheritance System.Object NHibernate.Transaction.AdoNetTransactionFactory ReliableAdoNetTransactionFactory Implements NHibernate.Transaction.ITransactionFactory Inherited Members NHibernate.Transaction.AdoNetTransactionFactory.ExecuteWorkInIsolationAsync(NHibernate.Engine.ISessionImplementor, NHibernate.Engine.Transaction.IIsolatedWork, System.Boolean, System.Threading.CancellationToken) NHibernate.Transaction.AdoNetTransactionFactory.EnlistInSystemTransactionIfNeeded(NHibernate.Engine.ISessionImplementor) NHibernate.Transaction.AdoNetTransactionFactory.ExplicitJoinSystemTransaction(NHibernate.Engine.ISessionImplementor) NHibernate.Transaction.AdoNetTransactionFactory.IsInActiveSystemTransaction(NHibernate.Engine.ISessionImplementor) NHibernate.Transaction.AdoNetTransactionFactory.Configure(System.Collections.Generic.IDictionary<System.String, System.String>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer Assembly : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.dll Syntax public class ReliableAdoNetTransactionFactory : AdoNetTransactionFactory, ITransactionFactory Remarks Requires the connection to be a ReliableSqlDbConnection Methods | Improve this Doc View Source CreateTransaction(ISessionImplementor) Creates the transaction. Declaration public ITransaction CreateTransaction(ISessionImplementor session) Parameters Type Name Description NHibernate.Engine.ISessionImplementor session The session. Returns Type Description NHibernate.ITransaction ITransaction. | Improve this Doc View Source ExecuteWorkInIsolation(ISessionImplementor, IIsolatedWork, Boolean) Executes some work in isolation. Declaration public void ExecuteWorkInIsolation(ISessionImplementor session, IIsolatedWork work, bool transacted) Parameters Type Name Description NHibernate.Engine.ISessionImplementor session The NHibernate session NHibernate.Engine.Transaction.IIsolatedWork work The work to execute System.Boolean transacted Whether or not to wrap the work in a transaction Implements NHibernate.Transaction.ITransactionFactory"
  },
  "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.DefaultReliableSql2008ClientDriver-1.html": {
    "href": "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.DefaultReliableSql2008ClientDriver-1.html",
    "title": "Class DefaultReliableSql2008ClientDriver<TTransientErrorDetectionStrategy> | Transient Fault Handling",
    "keywords": "Class DefaultReliableSql2008ClientDriver<TTransientErrorDetectionStrategy> Default retry logic implementation for a ReliableSqlConnection that allows you to specify the transient error detection strategy. Inheritance System.Object NHibernate.Driver.DriverBase NHibernate.Driver.ReflectionBasedDriver NHibernate.Driver.SqlClientDriver NHibernate.Driver.Sql2008ClientDriver ReliableSql2008ClientDriver DefaultReliableSql2008ClientDriver<TTransientErrorDetectionStrategy> SqlAzureClientDriver SqlAzureClientDriverWithTimeoutRetries Implements NHibernate.Driver.IDriver NHibernate.Driver.ISqlParameterFormatter NHibernate.AdoNet.IEmbeddedBatcherFactoryProvider Inherited Members ReliableSql2008ClientDriver.CreateConnection() ReliableSql2008ClientDriver.CreateCommand() NHibernate.Driver.Sql2008ClientDriver.InitializeParameter(System.Data.Common.DbParameter, System.String, NHibernate.SqlTypes.SqlType) NHibernate.Driver.Sql2008ClientDriver.RequiresTimeSpanForTime NHibernate.Driver.Sql2008ClientDriver.MinDate NHibernate.Driver.SqlClientDriver.MaxSizeForAnsiClob NHibernate.Driver.SqlClientDriver.MaxSizeForClob NHibernate.Driver.SqlClientDriver.MaxSizeForBlob NHibernate.Driver.SqlClientDriver.MaxSizeForXml NHibernate.Driver.SqlClientDriver.MaxSizeForLengthLimitedAnsiString NHibernate.Driver.SqlClientDriver.MaxSizeForLengthLimitedString NHibernate.Driver.SqlClientDriver.MaxSizeForLengthLimitedBinary NHibernate.Driver.SqlClientDriver.MaxPrecision NHibernate.Driver.SqlClientDriver.MaxScale NHibernate.Driver.SqlClientDriver.MaxDateTime2 NHibernate.Driver.SqlClientDriver.MaxDateTimeOffset NHibernate.Driver.SqlClientDriver.Configure(System.Collections.Generic.IDictionary<System.String, System.String>) NHibernate.Driver.SqlClientDriver.SetVariableLengthParameterSize(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.SetDefaultParameterSize(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.IsAnsiText(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.IsText(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.IsBlob(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.GetResultSetsCommand(NHibernate.Engine.ISessionImplementor) NHibernate.Driver.SqlClientDriver.NHibernate.AdoNet.IEmbeddedBatcherFactoryProvider.BatcherFactoryClass NHibernate.Driver.SqlClientDriver.UseNamedPrefixInSql NHibernate.Driver.SqlClientDriver.UseNamedPrefixInParameter NHibernate.Driver.SqlClientDriver.NamedPrefix NHibernate.Driver.SqlClientDriver.SupportsMultipleOpenReaders NHibernate.Driver.SqlClientDriver.SupportsMultipleQueries NHibernate.Driver.SqlClientDriver.HasDelayedDistributedTransactionCompletion NHibernate.Driver.ReflectionBasedDriver.ReflectionTypedProviderExceptionMessageTemplate NHibernate.Driver.ReflectionBasedDriver.DriverVersion NHibernate.Driver.DriverBase.FormatNameForSql(System.String) NHibernate.Driver.DriverBase.FormatNameForParameter(System.String) NHibernate.Driver.DriverBase.GenerateCommand(System.Data.CommandType, NHibernate.SqlCommand.SqlString, NHibernate.SqlTypes.SqlType[]) NHibernate.Driver.DriverBase.SetCommandTimeout(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.NHibernate.Driver.ISqlParameterFormatter.GetParameterName(System.Int32) NHibernate.Driver.DriverBase.GetSqlStringFormatter() NHibernate.Driver.DriverBase.GenerateParameter(System.Data.Common.DbCommand, System.String, NHibernate.SqlTypes.SqlType) NHibernate.Driver.DriverBase.RemoveUnusedCommandParameters(System.Data.Common.DbCommand, NHibernate.SqlCommand.SqlString) NHibernate.Driver.DriverBase.ExpandQueryParameters(System.Data.Common.DbCommand, NHibernate.SqlCommand.SqlString, NHibernate.SqlTypes.SqlType[]) NHibernate.Driver.DriverBase.CloneParameter(System.Data.Common.DbCommand, System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.DriverBase.PrepareCommand(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.OnBeforePrepare(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.AdjustCommand(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.GenerateOutputParameter(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.IsPrepareSqlEnabled NHibernate.Driver.DriverBase.SupportsPreparingCommands NHibernate.Driver.DriverBase.SupportsSystemTransactions NHibernate.Driver.DriverBase.SupportsNullEnlistment NHibernate.Driver.DriverBase.SupportsEnlistmentWhenAutoEnlistmentIsDisabled System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer Assembly : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.dll Syntax public abstract class DefaultReliableSql2008ClientDriver<TTransientErrorDetectionStrategy> : ReliableSql2008ClientDriver, IDriver, ISqlParameterFormatter, IEmbeddedBatcherFactoryProvider where TTransientErrorDetectionStrategy : ITransientErrorDetectionStrategy, new() Type Parameters Name Description TTransientErrorDetectionStrategy The transient error detection strategy you want to use Methods | Improve this Doc View Source CommandRetryEventHandler() An event handler delegate which will be called on command retries. Only override this if you want to explicitly capture command retries, otherwise override RetryEventHandler Declaration protected virtual EventHandler<RetryingEventArgs> CommandRetryEventHandler() Returns Type Description System.EventHandler < RetryingEventArgs > A custom method for handling the retry events | Improve this Doc View Source ConnectionRetryEventHandler() An event handler delegate which will be called on connection retries. Only override this if you want to explicitly capture connection retries, otherwise override RetryEventHandler Declaration protected virtual EventHandler<RetryingEventArgs> ConnectionRetryEventHandler() Returns Type Description System.EventHandler < RetryingEventArgs > A custom method for handling the retry events | Improve this Doc View Source CreateReliableConnection() Provides a ReliableSqlConnection instance to use for connections. Declaration protected override ReliableSqlConnection CreateReliableConnection() Returns Type Description ReliableSqlConnection A reliable connection Overrides ReliableSql2008ClientDriver.CreateReliableConnection() | Improve this Doc View Source RetryEventHandler() An event handler delegate which will be called on connection and command retries. If you override ConnectionRetryEventHandler and CommandRetryEventHandler then this is redundant. Declaration protected virtual EventHandler<RetryingEventArgs> RetryEventHandler() Returns Type Description System.EventHandler < RetryingEventArgs > A custom method for handling the retry events Implements NHibernate.Driver.IDriver NHibernate.Driver.ISqlParameterFormatter NHibernate.AdoNet.IEmbeddedBatcherFactoryProvider"
  },
  "api/MilestoneTG.TransientFaultHandling.RetryPolicyOptions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.RetryPolicyOptions.html",
    "title": "Class RetryPolicyOptions | Transient Fault Handling",
    "keywords": "Class RetryPolicyOptions Supports creating a retry policy using configuration. Inheritance System.Object RetryPolicyOptions HttpRetryPolicyOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling Assembly : MilestoneTG.TransientFaultHandling.dll Syntax public class RetryPolicyOptions Fields | Improve this Doc View Source EXPONENTIAL Exponential backoff strategy Declaration public const string EXPONENTIAL = \"Exponential\" Field Value Type Description System.String | Improve this Doc View Source FIXED Fixed interval strategy Declaration public const string FIXED = \"Fixed\" Field Value Type Description System.String | Improve this Doc View Source INCREMENTAL Incremental strategy Declaration public const string INCREMENTAL = \"Incremental\" Field Value Type Description System.String Properties | Improve this Doc View Source DeltaBackoff Gets or sets the delta backoff for the exponential strategy. Declaration public TimeSpan DeltaBackoff { get; set; } Property Value Type Description System.TimeSpan The delta backoff. | Improve this Doc View Source Enabled Gets or sets whether or not retry is enabled. Setting to false sets the strategy to NoRetry. Declaration public bool Enabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source FirstFastRetry Gets or sets a value indicating whether [first fast retry]. Declaration public bool FirstFastRetry { get; set; } Property Value Type Description System.Boolean if true, the first retry will be immediate and the remainder will be subject to the policy. Default: true. | Improve this Doc View Source Increment Gets or sets the increment for the incremental strategy. Declaration public TimeSpan Increment { get; set; } Property Value Type Description System.TimeSpan The increment. | Improve this Doc View Source Interval Gets or sets the interval for incremental and fixed strategies. Declaration public TimeSpan Interval { get; set; } Property Value Type Description System.TimeSpan The interval. | Improve this Doc View Source MaxBackoff Gets or sets the maximum backoff for the exponential strategy. Declaration public TimeSpan MaxBackoff { get; set; } Property Value Type Description System.TimeSpan The maximum backoff. | Improve this Doc View Source MinBackoff Gets or sets the minimum backoff for the exponential strategy. Declaration public TimeSpan MinBackoff { get; set; } Property Value Type Description System.TimeSpan The minimum backoff. | Improve this Doc View Source RetryCount Gets or sets the retry count. Declaration public int RetryCount { get; set; } Property Value Type Description System.Int32 The retry count. | Improve this Doc View Source RetryStrategyName Gets or sets the name of the retry strategy. Value must be one of the consts. Declaration public string RetryStrategyName { get; set; } Property Value Type Description System.String The name of the retry strategy."
  },
  "api/MilestoneTG.TransientFaultHandling.Http.HttpRequestWithStatusException.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Http.HttpRequestWithStatusException.html",
    "title": "Class HttpRequestWithStatusException | Transient Fault Handling",
    "keywords": "Class HttpRequestWithStatusException Inherits HttpRequestException adding HttpStatusCode to the exception. Inheritance System.Object System.Exception System.Net.Http.HttpRequestException HttpRequestWithStatusException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MilestoneTG.TransientFaultHandling.Http Assembly : MilestoneTG.TransientFaultHandling.Http.dll Syntax public class HttpRequestWithStatusException : HttpRequestException Constructors | Improve this Doc View Source HttpRequestWithStatusException() Initializes a new instance of the HttpRequestWithStatusException class. Declaration public HttpRequestWithStatusException() | Improve this Doc View Source HttpRequestWithStatusException(String) Initializes a new instance of the HttpRequestWithStatusException class with a specific message that describes the current exception. Declaration public HttpRequestWithStatusException(string message) Parameters Type Name Description System.String message A message that describes the current exception. | Improve this Doc View Source HttpRequestWithStatusException(String, Exception) Initializes a new instance of the HttpRequestWithStatusException class with a specific message that describes the current exception and an inner exception. Declaration public HttpRequestWithStatusException(string message, Exception inner) Parameters Type Name Description System.String message A message that describes the current exception. System.Exception inner The inner exception. Properties | Improve this Doc View Source StatusCode Http status code. Declaration public HttpStatusCode StatusCode { get; set; } Property Value Type Description System.Net.HttpStatusCode"
  },
  "api/MilestoneTG.TransientFaultHandling.Http.Extensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Http.Extensions.html",
    "title": "Namespace MilestoneTG.TransientFaultHandling.Http.Extensions | Transient Fault Handling",
    "keywords": "Namespace MilestoneTG.TransientFaultHandling.Http.Extensions Classes IHttpClientBuilderExtensions Extension methods for IHttpClientBuilder to support transient retries."
  },
  "api/MilestoneTG.TransientFaultHandling.Http.Extensions.IHttpClientBuilderExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Http.Extensions.IHttpClientBuilderExtensions.html",
    "title": "Class IHttpClientBuilderExtensions | Transient Fault Handling",
    "keywords": "Class IHttpClientBuilderExtensions Extension methods for IHttpClientBuilder to support transient retries. Inheritance System.Object IHttpClientBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Http.Extensions Assembly : MilestoneTG.TransientFaultHandling.Http.Extensions.dll Syntax public static class IHttpClientBuilderExtensions Methods | Improve this Doc View Source AddRetryHandler(IHttpClientBuilder) Adds the retry handler. Declaration public static IHttpClientBuilder AddRetryHandler(this IHttpClientBuilder builder) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder The builder. Returns Type Description Microsoft.Extensions.DependencyInjection.IHttpClientBuilder IHttpClientBuilder. Exceptions Type Condition System.ArgumentNullException builder | Improve this Doc View Source AddRetryHandler(IHttpClientBuilder, HttpRetryPolicyOptions) Adds the retry handler. Declaration public static IHttpClientBuilder AddRetryHandler(this IHttpClientBuilder builder, HttpRetryPolicyOptions retryPolicyOptions) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder The builder. HttpRetryPolicyOptions retryPolicyOptions The retry policy options. Returns Type Description Microsoft.Extensions.DependencyInjection.IHttpClientBuilder IHttpClientBuilder. Exceptions Type Condition System.ArgumentNullException builder System.ArgumentNullException retryPolicyOptions | Improve this Doc View Source AddRetryHandler(IHttpClientBuilder, RetryPolicy) Adds the retry handler. Declaration public static IHttpClientBuilder AddRetryHandler(this IHttpClientBuilder builder, RetryPolicy retryPolicy) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder The builder. RetryPolicy retryPolicy The retry policy. Returns Type Description Microsoft.Extensions.DependencyInjection.IHttpClientBuilder IHttpClientBuilder. Exceptions Type Condition System.ArgumentNullException builder System.ArgumentNullException retryPolicy | Improve this Doc View Source AddRetryHandler(IHttpClientBuilder, Action<HttpRetryPolicyOptions>) Adds the retry handler. Declaration public static IHttpClientBuilder AddRetryHandler(this IHttpClientBuilder builder, Action<HttpRetryPolicyOptions> configure) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder The builder. System.Action < HttpRetryPolicyOptions > configure The configure. Returns Type Description Microsoft.Extensions.DependencyInjection.IHttpClientBuilder IHttpClientBuilder. Exceptions Type Condition System.ArgumentNullException builder System.ArgumentNullException configure"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.SqlXmlReader.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlXmlReader.html",
    "title": "Class SqlXmlReader | Transient Fault Handling",
    "keywords": "Class SqlXmlReader Provides a disposable wrapper for SQL XML data reader, which synchronizes the SQL connection disposal with its own life cycle. Inheritance System.Object System.Xml.XmlReader SqlXmlReader Implements System.IDisposable Inherited Members System.Xml.XmlReader.ReadContentAsObject() System.Xml.XmlReader.ReadContentAsBoolean() System.Xml.XmlReader.ReadContentAsDateTime() System.Xml.XmlReader.ReadContentAsDateTimeOffset() System.Xml.XmlReader.ReadContentAsDouble() System.Xml.XmlReader.ReadContentAsFloat() System.Xml.XmlReader.ReadContentAsDecimal() System.Xml.XmlReader.ReadContentAsInt() System.Xml.XmlReader.ReadContentAsLong() System.Xml.XmlReader.ReadContentAsString() System.Xml.XmlReader.ReadContentAs(System.Type, System.Xml.IXmlNamespaceResolver) System.Xml.XmlReader.ReadElementContentAsObject() System.Xml.XmlReader.ReadElementContentAsObject(System.String, System.String) System.Xml.XmlReader.ReadElementContentAsBoolean() System.Xml.XmlReader.ReadElementContentAsBoolean(System.String, System.String) System.Xml.XmlReader.ReadElementContentAsDateTime() System.Xml.XmlReader.ReadElementContentAsDateTime(System.String, System.String) System.Xml.XmlReader.ReadElementContentAsDouble() System.Xml.XmlReader.ReadElementContentAsDouble(System.String, System.String) System.Xml.XmlReader.ReadElementContentAsFloat() System.Xml.XmlReader.ReadElementContentAsFloat(System.String, System.String) System.Xml.XmlReader.ReadElementContentAsDecimal() System.Xml.XmlReader.ReadElementContentAsDecimal(System.String, System.String) System.Xml.XmlReader.ReadElementContentAsInt() System.Xml.XmlReader.ReadElementContentAsInt(System.String, System.String) System.Xml.XmlReader.ReadElementContentAsLong() System.Xml.XmlReader.ReadElementContentAsLong(System.String, System.String) System.Xml.XmlReader.ReadElementContentAsString() System.Xml.XmlReader.ReadElementContentAsString(System.String, System.String) System.Xml.XmlReader.ReadElementContentAs(System.Type, System.Xml.IXmlNamespaceResolver) System.Xml.XmlReader.ReadElementContentAs(System.Type, System.Xml.IXmlNamespaceResolver, System.String, System.String) System.Xml.XmlReader.MoveToAttribute(System.Int32) System.Xml.XmlReader.Skip() System.Xml.XmlReader.ReadContentAsBase64(System.Byte[], System.Int32, System.Int32) System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[], System.Int32, System.Int32) System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[], System.Int32, System.Int32) System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[], System.Int32, System.Int32) System.Xml.XmlReader.ReadValueChunk(System.Char[], System.Int32, System.Int32) System.Xml.XmlReader.MoveToContent() System.Xml.XmlReader.ReadStartElement() System.Xml.XmlReader.ReadStartElement(System.String) System.Xml.XmlReader.ReadStartElement(System.String, System.String) System.Xml.XmlReader.ReadEndElement() System.Xml.XmlReader.IsStartElement() System.Xml.XmlReader.IsStartElement(System.String) System.Xml.XmlReader.IsStartElement(System.String, System.String) System.Xml.XmlReader.ReadToFollowing(System.String) System.Xml.XmlReader.ReadToFollowing(System.String, System.String) System.Xml.XmlReader.ReadToDescendant(System.String) System.Xml.XmlReader.ReadToDescendant(System.String, System.String) System.Xml.XmlReader.ReadToNextSibling(System.String) System.Xml.XmlReader.ReadToNextSibling(System.String, System.String) System.Xml.XmlReader.IsName(System.String) System.Xml.XmlReader.IsNameToken(System.String) System.Xml.XmlReader.ReadInnerXml() System.Xml.XmlReader.ReadOuterXml() System.Xml.XmlReader.ReadSubtree() System.Xml.XmlReader.Dispose() System.Xml.XmlReader.Dispose(System.Boolean) System.Xml.XmlReader.Create(System.String) System.Xml.XmlReader.Create(System.String, System.Xml.XmlReaderSettings) System.Xml.XmlReader.Create(System.String, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext) System.Xml.XmlReader.Create(System.IO.Stream) System.Xml.XmlReader.Create(System.IO.Stream, System.Xml.XmlReaderSettings) System.Xml.XmlReader.Create(System.IO.Stream, System.Xml.XmlReaderSettings, System.String) System.Xml.XmlReader.Create(System.IO.Stream, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext) System.Xml.XmlReader.Create(System.IO.TextReader) System.Xml.XmlReader.Create(System.IO.TextReader, System.Xml.XmlReaderSettings) System.Xml.XmlReader.Create(System.IO.TextReader, System.Xml.XmlReaderSettings, System.String) System.Xml.XmlReader.Create(System.IO.TextReader, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext) System.Xml.XmlReader.Create(System.Xml.XmlReader, System.Xml.XmlReaderSettings) System.Xml.XmlReader.GetValueAsync() System.Xml.XmlReader.ReadContentAsObjectAsync() System.Xml.XmlReader.ReadContentAsStringAsync() System.Xml.XmlReader.ReadContentAsAsync(System.Type, System.Xml.IXmlNamespaceResolver) System.Xml.XmlReader.ReadElementContentAsObjectAsync() System.Xml.XmlReader.ReadElementContentAsStringAsync() System.Xml.XmlReader.ReadElementContentAsAsync(System.Type, System.Xml.IXmlNamespaceResolver) System.Xml.XmlReader.ReadAsync() System.Xml.XmlReader.SkipAsync() System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[], System.Int32, System.Int32) System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[], System.Int32, System.Int32) System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[], System.Int32, System.Int32) System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[], System.Int32, System.Int32) System.Xml.XmlReader.ReadValueChunkAsync(System.Char[], System.Int32, System.Int32) System.Xml.XmlReader.MoveToContentAsync() System.Xml.XmlReader.ReadInnerXmlAsync() System.Xml.XmlReader.ReadOuterXmlAsync() System.Xml.XmlReader.Settings System.Xml.XmlReader.Name System.Xml.XmlReader.IsDefault System.Xml.XmlReader.QuoteChar System.Xml.XmlReader.XmlSpace System.Xml.XmlReader.XmlLang System.Xml.XmlReader.SchemaInfo System.Xml.XmlReader.ValueType System.Xml.XmlReader.Item[System.Int32] System.Xml.XmlReader.Item[System.String] System.Xml.XmlReader.Item[System.String, System.String] System.Xml.XmlReader.CanResolveEntity System.Xml.XmlReader.CanReadBinaryContent System.Xml.XmlReader.CanReadValueChunk System.Xml.XmlReader.HasAttributes System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data Assembly : MilestoneTG.TransientFaultHandling.Data.dll Syntax public class SqlXmlReader : XmlReader, IDisposable Constructors | Improve this Doc View Source SqlXmlReader(IDbConnection, XmlReader) Initializes a new instance of the SqlXmlReader class that is associated with the specified SQL connection and the original XML reader. Declaration public SqlXmlReader(IDbConnection connection, XmlReader innerReader) Parameters Type Name Description System.Data.IDbConnection connection The SQL connection that provides access to the XML data for this reader. System.Xml.XmlReader innerReader The original XML reader that is to be wrapped by this instance. Properties | Improve this Doc View Source AttributeCount Returns the number of attributes on the current node. Declaration public override int AttributeCount { get; } Property Value Type Description System.Int32 Overrides System.Xml.XmlReader.AttributeCount | Improve this Doc View Source BaseURI Returns the base Uniform Resource Identifier (URI) of the current node. Declaration public override string BaseURI { get; } Property Value Type Description System.String Overrides System.Xml.XmlReader.BaseURI | Improve this Doc View Source Depth Returns the depth of the current node in the XML document. Declaration public override int Depth { get; } Property Value Type Description System.Int32 Overrides System.Xml.XmlReader.Depth | Improve this Doc View Source EOF Returns a value that indicates whether the reader is positioned at the end of the stream. Declaration public override bool EOF { get; } Property Value Type Description System.Boolean Overrides System.Xml.XmlReader.EOF | Improve this Doc View Source HasValue Returns a value that indicates whether the current node can have a System.Xml.XmlReader.Value . Declaration public override bool HasValue { get; } Property Value Type Description System.Boolean Overrides System.Xml.XmlReader.HasValue | Improve this Doc View Source IsEmptyElement Returns a value that indicates whether the current node is an empty element. Declaration public override bool IsEmptyElement { get; } Property Value Type Description System.Boolean Overrides System.Xml.XmlReader.IsEmptyElement | Improve this Doc View Source LocalName Returns the local name of the current node. Declaration public override string LocalName { get; } Property Value Type Description System.String Overrides System.Xml.XmlReader.LocalName | Improve this Doc View Source NamespaceURI Returns the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned. Declaration public override string NamespaceURI { get; } Property Value Type Description System.String Overrides System.Xml.XmlReader.NamespaceURI | Improve this Doc View Source NameTable Returns the System.Xml.XmlNameTable that is associated with this implementation. Declaration public override XmlNameTable NameTable { get; } Property Value Type Description System.Xml.XmlNameTable Overrides System.Xml.XmlReader.NameTable | Improve this Doc View Source NodeType Returns the type of the current node. Declaration public override XmlNodeType NodeType { get; } Property Value Type Description System.Xml.XmlNodeType Overrides System.Xml.XmlReader.NodeType | Improve this Doc View Source Prefix Returns the namespace prefix that is associated with the current node. Declaration public override string Prefix { get; } Property Value Type Description System.String Overrides System.Xml.XmlReader.Prefix | Improve this Doc View Source ReadState Returns the state of the reader. Declaration public override ReadState ReadState { get; } Property Value Type Description System.Xml.ReadState Overrides System.Xml.XmlReader.ReadState | Improve this Doc View Source Value Returns the text value of the current node. Declaration public override string Value { get; } Property Value Type Description System.String Overrides System.Xml.XmlReader.Value Methods | Improve this Doc View Source Close() Closes both the original System.Xml.XmlReader and the associated SQL connection. Declaration public override void Close() Overrides System.Xml.XmlReader.Close() | Improve this Doc View Source GetAttribute(Int32) Returns the value of the attribute that has the specified index. Declaration public override string GetAttribute(int i) Parameters Type Name Description System.Int32 i The index of the attribute. The index is zero-based. (The first attribute has an index of 0.) Returns Type Description System.String The value of the specified attribute. This method does not move the reader. Overrides System.Xml.XmlReader.GetAttribute(System.Int32) | Improve this Doc View Source GetAttribute(String) Returns the value of the attribute that has the specified name. Declaration public override string GetAttribute(string name) Parameters Type Name Description System.String name The qualified name of the attribute. Returns Type Description System.String The value of the specified attribute, or null if the attribute isn't found or its value is System.String.Empty . Overrides System.Xml.XmlReader.GetAttribute(System.String) | Improve this Doc View Source GetAttribute(String, String) Returns the value of the attribute that has the specified name and namespace URI. Declaration public override string GetAttribute(string name, string namespaceUri) Parameters Type Name Description System.String name The local name of the attribute. System.String namespaceUri The namespace URI of the attribute. Returns Type Description System.String The value of the specified attribute, or null if the attribute isn't found or its value is System.String.Empty . This method does not move the reader. Overrides System.Xml.XmlReader.GetAttribute(System.String, System.String) | Improve this Doc View Source LookupNamespace(String) Resolves a namespace prefix in the current element's scope. Declaration public override string LookupNamespace(string prefix) Parameters Type Name Description System.String prefix The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. Returns Type Description System.String The namespace URI to which the prefix maps, or null if no matching prefix is found. Overrides System.Xml.XmlReader.LookupNamespace(System.String) | Improve this Doc View Source MoveToAttribute(String) Moves to the attribute that has the specified name. Declaration public override bool MoveToAttribute(string name) Parameters Type Name Description System.String name The qualified name of the attribute. Returns Type Description System.Boolean true if the attribute is found; otherwise, false. If false, the reader's position does not change. Overrides System.Xml.XmlReader.MoveToAttribute(System.String) | Improve this Doc View Source MoveToAttribute(String, String) Moves to the attribute that has the specified name and namespace URI. Declaration public override bool MoveToAttribute(string name, string ns) Parameters Type Name Description System.String name The local name of the attribute. System.String ns The namespace URI of the attribute. Returns Type Description System.Boolean true if the attribute is found; otherwise, false. If false, the reader's position does not change. Overrides System.Xml.XmlReader.MoveToAttribute(System.String, System.String) | Improve this Doc View Source MoveToElement() Moves to the element that contains the current attribute node. Declaration public override bool MoveToElement() Returns Type Description System.Boolean true if the reader is positioned on an attribute (in which case, the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (in which case, the position of the reader does not change). Overrides System.Xml.XmlReader.MoveToElement() | Improve this Doc View Source MoveToFirstAttribute() Moves to the first attribute. Declaration public override bool MoveToFirstAttribute() Returns Type Description System.Boolean true if an attribute exists (in which case, the reader moves to the first attribute); otherwise, false (in which case, the position of the reader does not change). Overrides System.Xml.XmlReader.MoveToFirstAttribute() | Improve this Doc View Source MoveToNextAttribute() Moves to the next attribute. Declaration public override bool MoveToNextAttribute() Returns Type Description System.Boolean true if there is a next attribute; false if there are no more attributes. Overrides System.Xml.XmlReader.MoveToNextAttribute() | Improve this Doc View Source Read() Reads the next node from the stream. Declaration public override bool Read() Returns Type Description System.Boolean true if the next node was read successfully; false if there are no more nodes to read. Overrides System.Xml.XmlReader.Read() | Improve this Doc View Source ReadAttributeValue() Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes. Declaration public override bool ReadAttributeValue() Returns Type Description System.Boolean true if there are nodes to return, false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read. An empty attribute such as misc=\"\" returns true with a single node that has a value of System.String.Empty . Overrides System.Xml.XmlReader.ReadAttributeValue() | Improve this Doc View Source ResolveEntity() Resolves the entity reference for EntityReference nodes. Declaration public override void ResolveEntity() Overrides System.Xml.XmlReader.ResolveEntity() Implements System.IDisposable"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.SqlCommandExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlServer.SqlCommandExtensions.html",
    "title": "Class SqlCommandExtensions | Transient Fault Handling",
    "keywords": "Class SqlCommandExtensions Provides a set of extension methods that add retry capabilities to the standard System.Data.SqlClient.SqlCommand implementation. Inheritance System.Object SqlCommandExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.SqlServer Assembly : MilestoneTG.TransientFaultHandling.Data.SqlServer.dll Syntax public static class SqlCommandExtensions Methods | Improve this Doc View Source ExecuteNonQueryWithRetry(SqlCommand) Executes a Transact-SQL statement against the connection and returns the number of rows affected. Uses the default retry policy when executing the command. Declaration public static int ExecuteNonQueryWithRetry(this SqlCommand command) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Int32 The number of rows affected. | Improve this Doc View Source ExecuteNonQueryWithRetryAsync(SqlCommand) Executes a Transact-SQL statement against the connection and returns the number of rows affected. Uses the default retry policy when executing the command. Declaration public static Task<int> ExecuteNonQueryWithRetryAsync(this SqlCommand command) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < System.Int32 > The number of rows affected. | Improve this Doc View Source ExecuteReaderWithRetry(SqlCommand) Sends the specified command to the connection and builds a SqlDataReader object that contains the results. Uses the default retry policy when executing the command. Declaration public static SqlDataReader ExecuteReaderWithRetry(this SqlCommand command) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Data.SqlClient.SqlDataReader A System.Data.SqlClient.SqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetry(SqlCommand, CommandBehavior) Sends the specified command to the connection and builds a SqlDataReader object by using the specified command behavior. Uses the default retry policy when executing the command. Declaration public static SqlDataReader ExecuteReaderWithRetry(this SqlCommand command, CommandBehavior behavior) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. System.Data.CommandBehavior behavior One of the enumeration values that specifies the command behavior. Returns Type Description System.Data.SqlClient.SqlDataReader A System.Data.SqlClient.SqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetryAsync(SqlCommand) Sends the specified command to the connection and builds a SqlDataReader object that contains the results. Uses the default retry policy when executing the command. Declaration public static Task<SqlDataReader> ExecuteReaderWithRetryAsync(this SqlCommand command) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < System.Data.SqlClient.SqlDataReader > A System.Data.SqlClient.SqlDataReader object. | Improve this Doc View Source ExecuteReaderWithRetryAsync(SqlCommand, CommandBehavior) Sends the specified command to the connection and builds a SqlDataReader object by using the specified command behavior. Uses the default retry policy when executing the command. Declaration public static Task<SqlDataReader> ExecuteReaderWithRetryAsync(this SqlCommand command, CommandBehavior behavior) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. System.Data.CommandBehavior behavior One of the enumeration values that specifies the command behavior. Returns Type Description System.Threading.Tasks.Task < System.Data.SqlClient.SqlDataReader > A System.Data.SqlClient.SqlDataReader object. | Improve this Doc View Source ExecuteScalarWithRetry(SqlCommand) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Uses the default retry policy when executing the command. Declaration public static object ExecuteScalarWithRetry(this SqlCommand command) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Object The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters. | Improve this Doc View Source ExecuteScalarWithRetryAsync(SqlCommand) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Uses the default retry policy when executing the command. Declaration public static Task<object> ExecuteScalarWithRetryAsync(this SqlCommand command) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < System.Object > The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters. | Improve this Doc View Source ExecuteXmlReaderWithRetry(SqlCommand) Sends the specified command to the connection and builds an XmlReader object that contains the results. Uses the default retry policy when executing the command. Declaration public static XmlReader ExecuteXmlReaderWithRetry(this SqlCommand command) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Xml.XmlReader An System.Xml.XmlReader object. | Improve this Doc View Source ExecuteXmlReaderWithRetry(SqlCommand, RetryPolicy) Sends the specified command to the connection and builds an XmlReader object that contains the results. Uses the specified retry policy when executing the command. Declaration public static XmlReader ExecuteXmlReaderWithRetry(this SqlCommand command, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. RetryPolicy retryPolicy The retry policy that determines whether to retry a command if a connection fails while executing the command. Returns Type Description System.Xml.XmlReader An System.Xml.XmlReader object. | Improve this Doc View Source ExecuteXmlReaderWithRetry(SqlCommand, RetryPolicy, RetryPolicy) Sends the specified command to the connection and builds an XmlReader object that contains the results. Uses the specified retry policies when executing the command and establishing a connection. Declaration public static XmlReader ExecuteXmlReaderWithRetry(this SqlCommand command, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. RetryPolicy cmdRetryPolicy The command retry policy that determines whether to retry a command if it fails while executing. RetryPolicy conRetryPolicy The connection retry policy that determines whether to re-establish a connection if it drops while executing the command. Returns Type Description System.Xml.XmlReader An System.Xml.XmlReader object. | Improve this Doc View Source ExecuteXmlReaderWithRetryAsync(SqlCommand) Sends the specified command to the connection and builds an XmlReader object that contains the results. Uses the default retry policy when executing the command. Declaration public static Task<XmlReader> ExecuteXmlReaderWithRetryAsync(this SqlCommand command) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. Returns Type Description System.Threading.Tasks.Task < System.Xml.XmlReader > An System.Xml.XmlReader object. | Improve this Doc View Source ExecuteXmlReaderWithRetryAsync(SqlCommand, RetryPolicy) Sends the specified command to the connection and builds an XmlReader object that contains the results. Uses the specified retry policy when executing the command. Declaration public static Task<XmlReader> ExecuteXmlReaderWithRetryAsync(this SqlCommand command, RetryPolicy retryPolicy) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. RetryPolicy retryPolicy The retry policy that determines whether to retry a command if a connection fails while executing the command. Returns Type Description System.Threading.Tasks.Task < System.Xml.XmlReader > An System.Xml.XmlReader object. | Improve this Doc View Source ExecuteXmlReaderWithRetryAsync(SqlCommand, RetryPolicy, RetryPolicy) Sends the specified command to the connection and builds an XmlReader object that contains the results. Uses the specified retry policies when executing the command and establishing a connection. Declaration public static Task<XmlReader> ExecuteXmlReaderWithRetryAsync(this SqlCommand command, RetryPolicy cmdRetryPolicy, RetryPolicy conRetryPolicy) Parameters Type Name Description System.Data.SqlClient.SqlCommand command The command object that is required for the extension method declaration. RetryPolicy cmdRetryPolicy The command retry policy that determines whether to retry a command if it fails while executing. RetryPolicy conRetryPolicy The connection retry policy that determines whether to re-establish a connection if it drops while executing the command. Returns Type Description System.Threading.Tasks.Task < System.Xml.XmlReader > An System.Xml.XmlReader object."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.SqlCommandFactory.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.SqlCommandFactory.html",
    "title": "Class SqlCommandFactory | Transient Fault Handling",
    "keywords": "Class SqlCommandFactory Provides factory methods for instantiating SQL commands. Inheritance System.Object SqlCommandFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data Assembly : MilestoneTG.TransientFaultHandling.Data.dll Syntax public static class SqlCommandFactory Fields | Improve this Doc View Source DefaultCommandTimeoutSeconds Returns the default time-out that will be applied to all SQL commands constructed by this factory class. Declaration public const int DefaultCommandTimeoutSeconds = 60 Field Value Type Description System.Int32 Methods | Improve this Doc View Source CreateCommand(IDbConnection) Creates a generic command of type Stored Procedure and assigns the default command time-out. Declaration public static IDbCommand CreateCommand(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection The database connection object to be associated with the new command. Returns Type Description System.Data.IDbCommand A new SQL command that is initialized with the Stored Procedure command type and initial settings. | Improve this Doc View Source CreateCommand(IDbConnection, String) Creates a generic command of type Stored Procedure and assigns the specified command text and default command time-out to it. Declaration public static IDbCommand CreateCommand(IDbConnection connection, string commandText) Parameters Type Name Description System.Data.IDbConnection connection The database connection object to be associated with the new command. System.String commandText The text of the command to run against the data source. Returns Type Description System.Data.IDbCommand A new SQL command that is initialized with the Stored Procedure command type, specified text, and initial settings. | Improve this Doc View Source CreateGetContextInfoCommand(IDbConnection) Creates a SQL command that is intended to return the connection's context ID, which is useful for tracing purposes. Declaration public static IDbCommand CreateGetContextInfoCommand(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection The database connection object to be associated with the new command. Returns Type Description System.Data.IDbCommand A new SQL command that is initialized with the specified connection."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Resources.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Resources.html",
    "title": "Class Resources | Transient Fault Handling",
    "keywords": "Class Resources A strongly-typed resource class, for looking up localized strings, etc. Inheritance System.Object Resources Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data Assembly : MilestoneTG.TransientFaultHandling.Data.dll Syntax public class Resources Properties | Improve this Doc View Source ConnectionHasNotBeenInitialized Looks up a localized string similar to Connection property has not been initialized.. Declaration public static string ConnectionHasNotBeenInitialized { get; } Property Value Type Description System.String | Improve this Doc View Source Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static CultureInfo Culture { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static ResourceManager ResourceManager { get; } Property Value Type Description System.Resources.ResourceManager | Improve this Doc View Source StringCannotBeEmpty Looks up a localized string similar to The specified string argument {0} must not be empty.. Declaration public static string StringCannotBeEmpty { get; } Property Value Type Description System.String"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Postgres.RetryManagerNpgsqlExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Postgres.RetryManagerNpgsqlExtensions.html",
    "title": "Class RetryManagerNpgsqlExtensions | Transient Fault Handling",
    "keywords": "Class RetryManagerNpgsqlExtensions Extends the RetryManager class to use it with the Npgsql Database retry strategy. Inheritance System.Object RetryManagerNpgsqlExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.Postgres Assembly : MilestoneTG.TransientFaultHandling.Data.Postgres.dll Syntax public static class RetryManagerNpgsqlExtensions Fields | Improve this Doc View Source DefaultStrategyCommandTechnologyName The technology name that can be used to get the default Npgsql command retry strategy. Declaration public const string DefaultStrategyCommandTechnologyName = \"Npgsql\" Field Value Type Description System.String | Improve this Doc View Source DefaultStrategyConnectionTechnologyName The technology name that can be used to get the default Npgsql connection retry strategy. Declaration public const string DefaultStrategyConnectionTechnologyName = \"NpgsqlConnection\" Field Value Type Description System.String Methods | Improve this Doc View Source GetDefaultNpgsqlCommandRetryPolicy(RetryManager) Returns the default retry policy dedicated to handling transient conditions with Npgsql commands. Declaration public static RetryPolicy GetDefaultNpgsqlCommandRetryPolicy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryPolicy The retry policy for Npgsql commands with the corresponding default strategy (or the default strategy, if no retry strategy assigned to Npgsql commands was found). | Improve this Doc View Source GetDefaultNpgsqlCommandRetryStrategy(RetryManager) Returns the default retry strategy for Npgsql commands. Declaration public static RetryStrategy GetDefaultNpgsqlCommandRetryStrategy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryStrategy The default retry strategy for Npgsql commands (or the default strategy, if no default could be found). | Improve this Doc View Source GetDefaultNpgsqlConnectionRetryPolicy(RetryManager) Returns the default retry policy dedicated to handling transient conditions with Npgsql connections. Declaration public static RetryPolicy GetDefaultNpgsqlConnectionRetryPolicy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryPolicy The retry policy for Npgsql connections with the corresponding default strategy (or the default strategy, if no retry strategy for Npgsql connections was found). | Improve this Doc View Source GetDefaultNpgsqlConnectionRetryStrategy(RetryManager) Returns the default retry strategy for Npgsql connections. Declaration public static RetryStrategy GetDefaultNpgsqlConnectionRetryStrategy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryStrategy The default retry strategy for Npgsql connections (or the default strategy, if no default could be found)."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Oracle.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Oracle.html",
    "title": "Namespace MilestoneTG.TransientFaultHandling.Data.Oracle | Transient Fault Handling",
    "keywords": "Namespace MilestoneTG.TransientFaultHandling.Data.Oracle Classes OracleCommandExtensions Provides a set of extension methods that add retry capabilities to the standard System.Data.SqlClient.SqlCommand implementation. OracleConnectionExtensions Provides a set of extension methods that add retry capabilities to the standard System.Data.SqlClient.SqlConnection implementation. OracleDatabaseTransientErrorDetectionStrategy Provides the transient error detection logic for transient faults that are specific to SQL Database. ReliableOracleConnection RetryManagerOracleExtensions Extends the RetryManager class to use it with the Oracle Database retry strategy."
  },
  "api/MilestoneTG.TransientFaultHandling.Data.Oracle.OracleDatabaseTransientErrorDetectionStrategy.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.Oracle.OracleDatabaseTransientErrorDetectionStrategy.html",
    "title": "Class OracleDatabaseTransientErrorDetectionStrategy | Transient Fault Handling",
    "keywords": "Class OracleDatabaseTransientErrorDetectionStrategy Provides the transient error detection logic for transient faults that are specific to SQL Database. Inheritance System.Object OracleDatabaseTransientErrorDetectionStrategy Implements ITransientErrorDetectionStrategy Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MilestoneTG.TransientFaultHandling.Data.Oracle Assembly : MilestoneTG.TransientFaultHandling.Data.Oracle.dll Syntax public sealed class OracleDatabaseTransientErrorDetectionStrategy : ITransientErrorDetectionStrategy Methods | Improve this Doc View Source IsTransient(Exception) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration public bool IsTransient(Exception ex) Parameters Type Name Description System.Exception ex The exception object to be verified. Returns Type Description System.Boolean true if the specified exception is considered as transient; otherwise, false. Implements ITransientErrorDetectionStrategy"
  },
  "api/MilestoneTG.TransientFaultHandling.Data.MySql.RetryManagerMySqlExtensions.html": {
    "href": "api/MilestoneTG.TransientFaultHandling.Data.MySql.RetryManagerMySqlExtensions.html",
    "title": "Class RetryManagerMySqlExtensions | Transient Fault Handling",
    "keywords": "Class RetryManagerMySqlExtensions Extends the RetryManager class to use it with the MySql Database retry strategy. Inheritance System.Object RetryManagerMySqlExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.TransientFaultHandling.Data.MySql Assembly : MilestoneTG.TransientFaultHandling.Data.MySql.dll Syntax public static class RetryManagerMySqlExtensions Fields | Improve this Doc View Source DefaultStrategyCommandTechnologyName The technology name that can be used to get the default MySql command retry strategy. Declaration public const string DefaultStrategyCommandTechnologyName = \"MySql\" Field Value Type Description System.String | Improve this Doc View Source DefaultStrategyConnectionTechnologyName The technology name that can be used to get the default MySql connection retry strategy. Declaration public const string DefaultStrategyConnectionTechnologyName = \"MySqlConnection\" Field Value Type Description System.String Methods | Improve this Doc View Source GetDefaultMySqlCommandRetryPolicy(RetryManager) Returns the default retry policy dedicated to handling transient conditions with MySql commands. Declaration public static RetryPolicy GetDefaultMySqlCommandRetryPolicy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryPolicy The retry policy for MySql commands with the corresponding default strategy (or the default strategy, if no retry strategy assigned to MySql commands was found). | Improve this Doc View Source GetDefaultMySqlCommandRetryStrategy(RetryManager) Returns the default retry strategy for MySql commands. Declaration public static RetryStrategy GetDefaultMySqlCommandRetryStrategy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryStrategy The default retry strategy for MySql commands (or the default strategy, if no default could be found). | Improve this Doc View Source GetDefaultMySqlConnectionRetryPolicy(RetryManager) Returns the default retry policy dedicated to handling transient conditions with MySql connections. Declaration public static RetryPolicy GetDefaultMySqlConnectionRetryPolicy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryPolicy The retry policy for MySql connections with the corresponding default strategy (or the default strategy, if no retry strategy for MySql connections was found). | Improve this Doc View Source GetDefaultMySqlConnectionRetryStrategy(RetryManager) Returns the default retry strategy for MySql connections. Declaration public static RetryStrategy GetDefaultMySqlConnectionRetryStrategy(this RetryManager retryManager) Parameters Type Name Description RetryManager retryManager Returns Type Description RetryStrategy The default retry strategy for MySql connections (or the default strategy, if no default could be found)."
  },
  "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.SqlAzureClientDriver.html": {
    "href": "api/MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.SqlAzureClientDriver.html",
    "title": "Class SqlAzureClientDriver | Transient Fault Handling",
    "keywords": "Class SqlAzureClientDriver NHibernate client driver for SQL Azure that includes the Enterprise Library transient fault-handling. Note: It doesn't handle timeout errors, which can sometimes be transient. If you have timeout errors that aren't caused by unoptimized queries then use Inheritance System.Object NHibernate.Driver.DriverBase NHibernate.Driver.ReflectionBasedDriver NHibernate.Driver.SqlClientDriver NHibernate.Driver.Sql2008ClientDriver ReliableSql2008ClientDriver DefaultReliableSql2008ClientDriver < SqlDatabaseTransientErrorDetectionStrategy > SqlAzureClientDriver Implements NHibernate.Driver.IDriver NHibernate.Driver.ISqlParameterFormatter NHibernate.AdoNet.IEmbeddedBatcherFactoryProvider Inherited Members DefaultReliableSql2008ClientDriver<SqlDatabaseTransientErrorDetectionStrategy>.CreateReliableConnection() DefaultReliableSql2008ClientDriver<SqlDatabaseTransientErrorDetectionStrategy>.ConnectionRetryEventHandler() DefaultReliableSql2008ClientDriver<SqlDatabaseTransientErrorDetectionStrategy>.CommandRetryEventHandler() DefaultReliableSql2008ClientDriver<SqlDatabaseTransientErrorDetectionStrategy>.RetryEventHandler() ReliableSql2008ClientDriver.CreateConnection() ReliableSql2008ClientDriver.CreateCommand() NHibernate.Driver.Sql2008ClientDriver.InitializeParameter(System.Data.Common.DbParameter, System.String, NHibernate.SqlTypes.SqlType) NHibernate.Driver.Sql2008ClientDriver.RequiresTimeSpanForTime NHibernate.Driver.Sql2008ClientDriver.MinDate NHibernate.Driver.SqlClientDriver.MaxSizeForAnsiClob NHibernate.Driver.SqlClientDriver.MaxSizeForClob NHibernate.Driver.SqlClientDriver.MaxSizeForBlob NHibernate.Driver.SqlClientDriver.MaxSizeForXml NHibernate.Driver.SqlClientDriver.MaxSizeForLengthLimitedAnsiString NHibernate.Driver.SqlClientDriver.MaxSizeForLengthLimitedString NHibernate.Driver.SqlClientDriver.MaxSizeForLengthLimitedBinary NHibernate.Driver.SqlClientDriver.MaxPrecision NHibernate.Driver.SqlClientDriver.MaxScale NHibernate.Driver.SqlClientDriver.MaxDateTime2 NHibernate.Driver.SqlClientDriver.MaxDateTimeOffset NHibernate.Driver.SqlClientDriver.Configure(System.Collections.Generic.IDictionary<System.String, System.String>) NHibernate.Driver.SqlClientDriver.SetVariableLengthParameterSize(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.SetDefaultParameterSize(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.IsAnsiText(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.IsText(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.IsBlob(System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.SqlClientDriver.GetResultSetsCommand(NHibernate.Engine.ISessionImplementor) NHibernate.Driver.SqlClientDriver.NHibernate.AdoNet.IEmbeddedBatcherFactoryProvider.BatcherFactoryClass NHibernate.Driver.SqlClientDriver.UseNamedPrefixInSql NHibernate.Driver.SqlClientDriver.UseNamedPrefixInParameter NHibernate.Driver.SqlClientDriver.NamedPrefix NHibernate.Driver.SqlClientDriver.SupportsMultipleOpenReaders NHibernate.Driver.SqlClientDriver.SupportsMultipleQueries NHibernate.Driver.SqlClientDriver.HasDelayedDistributedTransactionCompletion NHibernate.Driver.ReflectionBasedDriver.ReflectionTypedProviderExceptionMessageTemplate NHibernate.Driver.ReflectionBasedDriver.DriverVersion NHibernate.Driver.DriverBase.FormatNameForSql(System.String) NHibernate.Driver.DriverBase.FormatNameForParameter(System.String) NHibernate.Driver.DriverBase.GenerateCommand(System.Data.CommandType, NHibernate.SqlCommand.SqlString, NHibernate.SqlTypes.SqlType[]) NHibernate.Driver.DriverBase.SetCommandTimeout(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.NHibernate.Driver.ISqlParameterFormatter.GetParameterName(System.Int32) NHibernate.Driver.DriverBase.GetSqlStringFormatter() NHibernate.Driver.DriverBase.GenerateParameter(System.Data.Common.DbCommand, System.String, NHibernate.SqlTypes.SqlType) NHibernate.Driver.DriverBase.RemoveUnusedCommandParameters(System.Data.Common.DbCommand, NHibernate.SqlCommand.SqlString) NHibernate.Driver.DriverBase.ExpandQueryParameters(System.Data.Common.DbCommand, NHibernate.SqlCommand.SqlString, NHibernate.SqlTypes.SqlType[]) NHibernate.Driver.DriverBase.CloneParameter(System.Data.Common.DbCommand, System.Data.Common.DbParameter, NHibernate.SqlTypes.SqlType) NHibernate.Driver.DriverBase.PrepareCommand(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.OnBeforePrepare(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.AdjustCommand(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.GenerateOutputParameter(System.Data.Common.DbCommand) NHibernate.Driver.DriverBase.IsPrepareSqlEnabled NHibernate.Driver.DriverBase.SupportsPreparingCommands NHibernate.Driver.DriverBase.SupportsSystemTransactions NHibernate.Driver.DriverBase.SupportsNullEnlistment NHibernate.Driver.DriverBase.SupportsEnlistmentWhenAutoEnlistmentIsDisabled System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer Assembly : MilestoneTG.NHibernate.TransientFaultHandling.SqlServer.dll Syntax public class SqlAzureClientDriver : DefaultReliableSql2008ClientDriver<SqlDatabaseTransientErrorDetectionStrategy>, IDriver, ISqlParameterFormatter, IEmbeddedBatcherFactoryProvider Implements NHibernate.Driver.IDriver NHibernate.Driver.ISqlParameterFormatter NHibernate.AdoNet.IEmbeddedBatcherFactoryProvider"
  }
}